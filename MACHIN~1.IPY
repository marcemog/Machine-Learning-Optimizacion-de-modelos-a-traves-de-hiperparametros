{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "y7ik04NlDZMA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "30787afa-bd5c-4ecf-f1f1-c7a599afe9ad"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "datos = pd.read_csv(\"carros.csv\")\n",
        "datos.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      precio  vendido  edad_del_modelo   km_by_year\n",
              "0   30941.02        1               18  35085.22134\n",
              "1   40557.96        1               20  12622.05362\n",
              "2   89627.50        0               12  11440.79806\n",
              "3   95276.14        0                3  43167.32682\n",
              "4  117384.68        1                4  12770.11290"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d797c583-dd49-4c36-af60-4025767b12d1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>precio</th>\n",
              "      <th>vendido</th>\n",
              "      <th>edad_del_modelo</th>\n",
              "      <th>km_by_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30941.02</td>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>35085.22134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40557.96</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>12622.05362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>89627.50</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>11440.79806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>95276.14</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>43167.32682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>117384.68</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>12770.11290</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d797c583-dd49-4c36-af60-4025767b12d1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d797c583-dd49-4c36-af60-4025767b12d1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d797c583-dd49-4c36-af60-4025767b12d1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b52E4e1hjegN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "fff20900-c1ea-4d2b-e9c5-de9c175d0caf"
      },
      "source": [
        "#situacion con los datos ordenados de la peor manera\n",
        "datos_ord = datos.sort_values(\"vendido\", ascending=True)\n",
        "x_ord = datos_ord[[\"precio\", \"edad_del_modelo\",\"km_by_year\"]]\n",
        "y_ord = datos_ord[\"vendido\"]\n",
        "datos_ord.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        precio  vendido  edad_del_modelo   km_by_year\n",
              "4999  74023.29        0               12  24812.80412\n",
              "5322  84843.49        0               13  23095.63834\n",
              "5319  83100.27        0               19  36240.72746\n",
              "5316  87932.13        0               16  32249.56426\n",
              "5315  77937.01        0               15  28414.50704"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27b02ac4-72ab-4f6a-b039-5789c07e4a01\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>precio</th>\n",
              "      <th>vendido</th>\n",
              "      <th>edad_del_modelo</th>\n",
              "      <th>km_by_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4999</th>\n",
              "      <td>74023.29</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>24812.80412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5322</th>\n",
              "      <td>84843.49</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>23095.63834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5319</th>\n",
              "      <td>83100.27</td>\n",
              "      <td>0</td>\n",
              "      <td>19</td>\n",
              "      <td>36240.72746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5316</th>\n",
              "      <td>87932.13</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>32249.56426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5315</th>\n",
              "      <td>77937.01</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>28414.50704</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27b02ac4-72ab-4f6a-b039-5789c07e4a01')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-27b02ac4-72ab-4f6a-b039-5789c07e4a01 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-27b02ac4-72ab-4f6a-b039-5789c07e4a01');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZNT26vFEeYmz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "968b24c9-1420-44c9-8cd7-b61d98fc18f2"
      },
      "source": [
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.dummy import DummyClassifier\n",
        "import numpy as np\n",
        "\n",
        "SEED = 301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "modelo = DummyClassifier()\n",
        "results = cross_validate(modelo, x_ord, y_ord, cv = 10, return_train_score=False)\n",
        "media = results['test_score'].mean()\n",
        "desviacion_estandar = results['test_score'].std()\n",
        "print(\"Accuracy con dummy stratified, 10 = [%.2f, %.2f]\" % ((media - 2 * desviacion_estandar)*100, (media + 2 * desviacion_estandar) * 100))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy con dummy stratified, 10 = [58.00, 58.00]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "73mCcFA_eG_K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03c51924-000e-4469-ac8f-4757e4904ff5"
      },
      "source": [
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "SEED = 301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "modelo = DecisionTreeClassifier(max_depth=2)\n",
        "results = cross_validate(modelo, x_ord, y_ord, cv = 10, return_train_score=False)\n",
        "media = results['test_score'].mean()\n",
        "desviacion_estandar = results['test_score'].std()\n",
        "print(\"Accuracy con cross validation, 10 = [%.2f, %.2f]\" % ((media - 2 * desviacion_estandar)*100, (media + 2 * desviacion_estandar) * 100))"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy con cross validation, 10 = [73.83, 77.73]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5C8Y6J-PGpYf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "d1beda3f-a495-45cc-c884-6dd39c906802"
      },
      "source": [
        "#generando datos aleatorios del modelo de carro\n",
        "np.random.seed(SEED)\n",
        "datos['modelo'] = datos.edad_del_modelo + np.random.randint(-2, 3, size=10000)\n",
        "datos.modelo = datos.modelo + abs(datos.modelo.min()) + 1\n",
        "datos.head()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      precio  vendido  edad_del_modelo   km_by_year  modelo\n",
              "0   30941.02        1               18  35085.22134      18\n",
              "1   40557.96        1               20  12622.05362      24\n",
              "2   89627.50        0               12  11440.79806      14\n",
              "3   95276.14        0                3  43167.32682       6\n",
              "4  117384.68        1                4  12770.11290       5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a07ba8e0-88a2-45aa-93a1-ef2076d29785\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>precio</th>\n",
              "      <th>vendido</th>\n",
              "      <th>edad_del_modelo</th>\n",
              "      <th>km_by_year</th>\n",
              "      <th>modelo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30941.02</td>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>35085.22134</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40557.96</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>12622.05362</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>89627.50</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>11440.79806</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>95276.14</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>43167.32682</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>117384.68</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>12770.11290</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a07ba8e0-88a2-45aa-93a1-ef2076d29785')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a07ba8e0-88a2-45aa-93a1-ef2076d29785 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a07ba8e0-88a2-45aa-93a1-ef2076d29785');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3hmjt7qPHOZY"
      },
      "source": [
        "def imprime_resultados(results):\n",
        "  media = results['test_score'].mean() * 100\n",
        "  desviacion = results['test_score'].std() * 100\n",
        "  print(\"Accuracy media %.2f\" % media)\n",
        "  print(\"Intervalo [%.2f, %.2f]\" % (media - 2 * desviacion, media + 2 * desviacion))"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "goijy0rSS7n-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0428b3ed-6cbb-4b7c-dbb7-75fe5d3b145f"
      },
      "source": [
        "# GroupKFold en un pipeline con StandardScaler y SVC\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "SEED = 301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "modelo = SVC()\n",
        "\n",
        "pipeline = Pipeline([('transformacion',scaler), ('estimador',modelo)])\n",
        "\n",
        "cv = GroupKFold(n_splits = 10)\n",
        "results = cross_validate(pipeline, x_ord, y_ord, cv = cv, groups = datos.modelo, return_train_score=False)\n",
        "imprime_resultados(results)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy media 76.68\n",
            "Intervalo [74.28, 79.08]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IKD8uaWkNcUL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fbc1c9aa-ea76-46bc-cb57-5133f8f3101a"
      },
      "source": [
        "# GroupKFold para analizar como el modelo se comporta con nuevos grupos\n",
        "\n",
        "from sklearn.model_selection import GroupKFold\n",
        "\n",
        "SEED = 301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "cv = GroupKFold(n_splits = 10)\n",
        "modelo = DecisionTreeClassifier(max_depth=2)\n",
        "results = cross_validate(modelo, x_ord, y_ord, cv = cv, groups = datos.modelo, return_train_score=False)\n",
        "imprime_resultados(results)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy media 75.78\n",
            "Intervalo [73.67, 77.90]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import export_graphviz\n",
        "import graphviz\n",
        "\n",
        "modelo.fit(x_ord, y_ord)\n",
        "features = x_ord.columns\n",
        "dot_data = export_graphviz(modelo, out_file=None, filled=True, rounded=True, class_names=['No','Si'], feature_names= features)\n",
        "graph = graphviz.Source(dot_data)\n",
        "graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 440
        },
        "id": "dvduGxq4y9Qj",
        "outputId": "13156f84-f0e5-48a9-e5a0-75d7532dea89"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"596pt\" height=\"314pt\"\n viewBox=\"0.00 0.00 595.50 314.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 310)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-310 591.5,-310 591.5,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#c8e4f8\" stroke=\"black\" d=\"M343,-306C343,-306 226,-306 226,-306 220,-306 214,-300 214,-294 214,-294 214,-235 214,-235 214,-229 220,-223 226,-223 226,-223 343,-223 343,-223 349,-223 355,-229 355,-235 355,-235 355,-294 355,-294 355,-300 349,-306 343,-306\"/>\n<text text-anchor=\"middle\" x=\"284.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 59982.246</text>\n<text text-anchor=\"middle\" x=\"284.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.487</text>\n<text text-anchor=\"middle\" x=\"284.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10000</text>\n<text text-anchor=\"middle\" x=\"284.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4200, 5800]</text>\n<text text-anchor=\"middle\" x=\"284.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#52a9e8\" stroke=\"black\" d=\"M254,-187C254,-187 137,-187 137,-187 131,-187 125,-181 125,-175 125,-175 125,-116 125,-116 125,-110 131,-104 137,-104 137,-104 254,-104 254,-104 260,-104 266,-110 266,-116 266,-116 266,-175 266,-175 266,-181 260,-187 254,-187\"/>\n<text text-anchor=\"middle\" x=\"195.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 40083.385</text>\n<text text-anchor=\"middle\" x=\"195.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.198</text>\n<text text-anchor=\"middle\" x=\"195.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4347</text>\n<text text-anchor=\"middle\" x=\"195.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [484, 3863]</text>\n<text text-anchor=\"middle\" x=\"195.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M253.62,-222.91C246.79,-213.92 239.48,-204.32 232.43,-195.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"235.16,-192.86 226.32,-187.02 229.59,-197.1 235.16,-192.86\"/>\n<text text-anchor=\"middle\" x=\"222.96\" y=\"-208.09\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#f3c3a0\" stroke=\"black\" d=\"M451,-187C451,-187 296,-187 296,-187 290,-187 284,-181 284,-175 284,-175 284,-116 284,-116 284,-110 290,-104 296,-104 296,-104 451,-104 451,-104 457,-104 463,-110 463,-116 463,-116 463,-175 463,-175 463,-181 457,-187 451,-187\"/>\n<text text-anchor=\"middle\" x=\"373.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">km_by_year &lt;= 24124.006</text>\n<text text-anchor=\"middle\" x=\"373.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.45</text>\n<text text-anchor=\"middle\" x=\"373.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5653</text>\n<text text-anchor=\"middle\" x=\"373.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3716, 1937]</text>\n<text text-anchor=\"middle\" x=\"373.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 0&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>0&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M315.38,-222.91C322.21,-213.92 329.52,-204.32 336.57,-195.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"339.41,-197.1 342.68,-187.02 333.84,-192.86 339.41,-197.1\"/>\n<text text-anchor=\"middle\" x=\"346.04\" y=\"-208.09\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#399de5\" stroke=\"black\" d=\"M105,-68C105,-68 12,-68 12,-68 6,-68 0,-62 0,-56 0,-56 0,-12 0,-12 0,-6 6,0 12,0 12,0 105,0 105,0 111,0 117,-6 117,-12 117,-12 117,-56 117,-56 117,-62 111,-68 105,-68\"/>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1935</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1935]</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M144.49,-103.73C132.62,-94.24 120,-84.16 108.19,-74.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"110.16,-71.81 100.16,-68.3 105.79,-77.28 110.16,-71.81\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#6bb6ec\" stroke=\"black\" d=\"M255.5,-68C255.5,-68 147.5,-68 147.5,-68 141.5,-68 135.5,-62 135.5,-56 135.5,-56 135.5,-12 135.5,-12 135.5,-6 141.5,0 147.5,0 147.5,0 255.5,0 255.5,0 261.5,0 267.5,-6 267.5,-12 267.5,-12 267.5,-56 267.5,-56 267.5,-62 261.5,-68 255.5,-68\"/>\n<text text-anchor=\"middle\" x=\"201.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.321</text>\n<text text-anchor=\"middle\" x=\"201.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2412</text>\n<text text-anchor=\"middle\" x=\"201.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [484, 1928]</text>\n<text text-anchor=\"middle\" x=\"201.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M197.73,-103.73C198.18,-95.52 198.66,-86.86 199.11,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"202.62,-78.48 199.68,-68.3 195.63,-78.09 202.62,-78.48\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#fcefe5\" stroke=\"black\" d=\"M425.5,-68C425.5,-68 309.5,-68 309.5,-68 303.5,-68 297.5,-62 297.5,-56 297.5,-56 297.5,-12 297.5,-12 297.5,-6 303.5,0 309.5,0 309.5,0 425.5,0 425.5,0 431.5,0 437.5,-6 437.5,-12 437.5,-12 437.5,-56 437.5,-56 437.5,-62 431.5,-68 425.5,-68\"/>\n<text text-anchor=\"middle\" x=\"367.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.498</text>\n<text text-anchor=\"middle\" x=\"367.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3513</text>\n<text text-anchor=\"middle\" x=\"367.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1879, 1634]</text>\n<text text-anchor=\"middle\" x=\"367.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 4&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>4&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M371.27,-103.73C370.82,-95.52 370.34,-86.86 369.89,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"373.37,-78.09 369.32,-68.3 366.38,-78.48 373.37,-78.09\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#e9965a\" stroke=\"black\" d=\"M575.5,-68C575.5,-68 467.5,-68 467.5,-68 461.5,-68 455.5,-62 455.5,-56 455.5,-56 455.5,-12 455.5,-12 455.5,-6 461.5,0 467.5,0 467.5,0 575.5,0 575.5,0 581.5,0 587.5,-6 587.5,-12 587.5,-12 587.5,-56 587.5,-56 587.5,-62 581.5,-68 575.5,-68\"/>\n<text text-anchor=\"middle\" x=\"521.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.243</text>\n<text text-anchor=\"middle\" x=\"521.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2140</text>\n<text text-anchor=\"middle\" x=\"521.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1837, 303]</text>\n<text text-anchor=\"middle\" x=\"521.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 4&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>4&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M428.61,-103.73C441.55,-94.15 455.32,-83.96 468.19,-74.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"470.54,-77.06 476.49,-68.3 466.37,-71.43 470.54,-77.06\"/>\n</g>\n</g>\n</svg>\n",
            "text/plain": [
              "<graphviz.sources.Source at 0x7fea60516d90>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# GroupKFold para analizar como el modelo se comporta con nuevos grupos\n",
        "# con max_depth = 3\n",
        "from sklearn.model_selection import GroupKFold\n",
        "\n",
        "SEED = 301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "cv = GroupKFold(n_splits = 10)\n",
        "modelo = DecisionTreeClassifier(max_depth=3)\n",
        "results = cross_validate(modelo, x_ord, y_ord, cv = cv, groups = datos.modelo, return_train_score=False)\n",
        "imprime_resultados(results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NbiiFShd0G0w",
        "outputId": "e3a76600-dbe0-4075-b540-a16f1d6d599e"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy media 78.67\n",
            "Intervalo [76.40, 80.94]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import export_graphviz\n",
        "import graphviz\n",
        "\n",
        "modelo.fit(x_ord, y_ord)\n",
        "features = x_ord.columns\n",
        "dot_data = export_graphviz(modelo, out_file=None, filled=True, rounded=True, class_names=['No','Si'], feature_names= features)\n",
        "graph = graphviz.Source(dot_data)\n",
        "graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "M5ocW_ON1oyn",
        "outputId": "b0651c80-5bff-437e-ae4d-30ee366e6849"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"867pt\" height=\"433pt\"\n viewBox=\"0.00 0.00 867.00 433.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 429)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-429 863,-429 863,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#c8e4f8\" stroke=\"black\" d=\"M353,-425C353,-425 236,-425 236,-425 230,-425 224,-419 224,-413 224,-413 224,-354 224,-354 224,-348 230,-342 236,-342 236,-342 353,-342 353,-342 359,-342 365,-348 365,-354 365,-354 365,-413 365,-413 365,-419 359,-425 353,-425\"/>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 59982.246</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.487</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10000</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4200, 5800]</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#52a9e8\" stroke=\"black\" d=\"M264,-306C264,-306 147,-306 147,-306 141,-306 135,-300 135,-294 135,-294 135,-235 135,-235 135,-229 141,-223 147,-223 147,-223 264,-223 264,-223 270,-223 276,-229 276,-235 276,-235 276,-294 276,-294 276,-300 270,-306 264,-306\"/>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 40083.385</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.198</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4347</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [484, 3863]</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M263.62,-341.91C256.79,-332.92 249.48,-323.32 242.43,-314.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"245.16,-311.86 236.32,-306.02 239.59,-316.1 245.16,-311.86\"/>\n<text text-anchor=\"middle\" x=\"232.96\" y=\"-327.09\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#f3c3a0\" stroke=\"black\" d=\"M514,-306C514,-306 359,-306 359,-306 353,-306 347,-300 347,-294 347,-294 347,-235 347,-235 347,-229 353,-223 359,-223 359,-223 514,-223 514,-223 520,-223 526,-229 526,-235 526,-235 526,-294 526,-294 526,-300 520,-306 514,-306\"/>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">km_by_year &lt;= 24124.006</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.45</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5653</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3716, 1937]</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 0&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>0&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M343.77,-341.91C355.22,-332.47 367.51,-322.34 379.28,-312.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"381.83,-315.08 387.32,-306.02 377.38,-309.68 381.83,-315.08\"/>\n<text text-anchor=\"middle\" x=\"384.92\" y=\"-327.21\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#399de5\" stroke=\"black\" d=\"M105,-179.5C105,-179.5 12,-179.5 12,-179.5 6,-179.5 0,-173.5 0,-167.5 0,-167.5 0,-123.5 0,-123.5 0,-117.5 6,-111.5 12,-111.5 12,-111.5 105,-111.5 105,-111.5 111,-111.5 117,-117.5 117,-123.5 117,-123.5 117,-167.5 117,-167.5 117,-173.5 111,-179.5 105,-179.5\"/>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1935</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1935]</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M154.5,-222.91C139.53,-210.99 123.17,-197.98 108.28,-186.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"110.18,-183.16 100.17,-179.67 105.82,-188.63 110.18,-183.16\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#6bb6ec\" stroke=\"black\" d=\"M264,-187C264,-187 147,-187 147,-187 141,-187 135,-181 135,-175 135,-175 135,-116 135,-116 135,-110 141,-104 147,-104 147,-104 264,-104 264,-104 270,-104 276,-110 276,-116 276,-116 276,-175 276,-175 276,-181 270,-187 264,-187\"/>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 41083.029</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.321</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2412</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [484, 1928]</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.5,-222.91C205.5,-214.65 205.5,-205.86 205.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"209,-197.02 205.5,-187.02 202,-197.02 209,-197.02\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#95cbf1\" stroke=\"black\" d=\"M109.5,-68C109.5,-68 23.5,-68 23.5,-68 17.5,-68 11.5,-62 11.5,-56 11.5,-56 11.5,-12 11.5,-12 11.5,-6 17.5,0 23.5,0 23.5,0 109.5,0 109.5,0 115.5,0 121.5,-6 121.5,-12 121.5,-12 121.5,-56 121.5,-56 121.5,-62 115.5,-68 109.5,-68\"/>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.434</text>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 110</text>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [35, 75]</text>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M153.74,-103.73C141.7,-94.24 128.9,-84.16 116.92,-74.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"118.79,-71.74 108.77,-68.3 114.46,-77.24 118.79,-71.74\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#69b5eb\" stroke=\"black\" d=\"M259.5,-68C259.5,-68 151.5,-68 151.5,-68 145.5,-68 139.5,-62 139.5,-56 139.5,-56 139.5,-12 139.5,-12 139.5,-6 145.5,0 151.5,0 151.5,0 259.5,0 259.5,0 265.5,0 271.5,-6 271.5,-12 271.5,-12 271.5,-56 271.5,-56 271.5,-62 265.5,-68 259.5,-68\"/>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.314</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2302</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [449, 1853]</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.5,-103.73C205.5,-95.52 205.5,-86.86 205.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"209,-78.3 205.5,-68.3 202,-78.3 209,-78.3\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"#fcefe5\" stroke=\"black\" d=\"M494.5,-187C494.5,-187 378.5,-187 378.5,-187 372.5,-187 366.5,-181 366.5,-175 366.5,-175 366.5,-116 366.5,-116 366.5,-110 372.5,-104 378.5,-104 378.5,-104 494.5,-104 494.5,-104 500.5,-104 506.5,-110 506.5,-116 506.5,-116 506.5,-175 506.5,-175 506.5,-181 500.5,-187 494.5,-187\"/>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 99974.41</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.498</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3513</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1879, 1634]</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 6&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>6&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M436.5,-222.91C436.5,-214.65 436.5,-205.86 436.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"440,-197.02 436.5,-187.02 433,-197.02 440,-197.02\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"#e9965a\" stroke=\"black\" d=\"M716,-187C716,-187 591,-187 591,-187 585,-187 579,-181 579,-175 579,-175 579,-116 579,-116 579,-110 585,-104 591,-104 591,-104 716,-104 716,-104 722,-104 728,-110 728,-116 728,-116 728,-175 728,-175 728,-181 722,-187 716,-187\"/>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 100076.957</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.243</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2140</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1837, 303]</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 6&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>6&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M511.79,-222.91C530.49,-212.82 550.65,-201.95 569.74,-191.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"571.57,-194.65 578.71,-186.82 568.25,-188.49 571.57,-194.65\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"#f9e0ce\" stroke=\"black\" d=\"M417.5,-68C417.5,-68 301.5,-68 301.5,-68 295.5,-68 289.5,-62 289.5,-56 289.5,-56 289.5,-12 289.5,-12 289.5,-6 295.5,0 301.5,0 301.5,0 417.5,0 417.5,0 423.5,0 429.5,-6 429.5,-12 429.5,-12 429.5,-56 429.5,-56 429.5,-62 423.5,-68 417.5,-68\"/>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.49</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2944</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1682, 1262]</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 7&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>7&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M407.83,-103.73C401.61,-94.88 395.02,-85.51 388.77,-76.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"391.53,-74.47 382.92,-68.3 385.81,-78.49 391.53,-74.47\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"#a2d1f3\" stroke=\"black\" d=\"M561,-68C561,-68 460,-68 460,-68 454,-68 448,-62 448,-56 448,-56 448,-12 448,-12 448,-6 454,0 460,0 460,0 561,0 561,0 567,0 573,-6 573,-12 573,-12 573,-56 573,-56 573,-62 567,-68 561,-68\"/>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.453</text>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 569</text>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [197, 372]</text>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 7&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>7&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M464.05,-103.73C470.03,-94.88 476.37,-85.51 482.37,-76.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"485.3,-78.54 488,-68.3 479.5,-74.63 485.3,-78.54\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"#e68742\" stroke=\"black\" d=\"M704,-68C704,-68 603,-68 603,-68 597,-68 591,-62 591,-56 591,-56 591,-12 591,-12 591,-6 597,0 603,0 603,0 704,0 704,0 710,0 716,-6 716,-12 716,-12 716,-56 716,-56 716,-62 710,-68 704,-68\"/>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.082</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1809</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1732, 77]</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M653.5,-103.73C653.5,-95.52 653.5,-86.86 653.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"657,-78.3 653.5,-68.3 650,-78.3 657,-78.3\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"#95cbf1\" stroke=\"black\" d=\"M847,-68C847,-68 746,-68 746,-68 740,-68 734,-62 734,-56 734,-56 734,-12 734,-12 734,-6 740,0 746,0 746,0 847,0 847,0 853,0 859,-6 859,-12 859,-12 859,-56 859,-56 859,-62 853,-68 847,-68\"/>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.433</text>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 331</text>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [105, 226]</text>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M706.75,-103.73C719.25,-94.15 732.56,-83.96 744.99,-74.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"747.2,-77.16 753.01,-68.3 742.95,-71.6 747.2,-77.16\"/>\n</g>\n</g>\n</svg>\n",
            "text/plain": [
              "<graphviz.sources.Source at 0x7fea5dcf8820>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# GroupKFold para analizar como el modelo se comporta con nuevos grupos\n",
        "# con max_depth = 10\n",
        "from sklearn.model_selection import GroupKFold\n",
        "\n",
        "SEED = 301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "cv = GroupKFold(n_splits = 10)\n",
        "modelo = DecisionTreeClassifier(max_depth=10)\n",
        "results = cross_validate(modelo, x_ord, y_ord, cv = cv, groups = datos.modelo, return_train_score=False)\n",
        "imprime_resultados(results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N-vQeks52Afo",
        "outputId": "20605dc1-dc97-482c-f540-0633f9d416c5"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy media 77.19\n",
            "Intervalo [75.26, 79.13]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Probando parametros"
      ],
      "metadata": {
        "id": "g8W7VnyN2Cbl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "los hiper parametros son los configurados por nosotros antres de entrenar el modelo, los parametros son definidos por el propio modelo\n",
        "Un hiper parámetro, como bien explicamos, es el parámetro, de los parámetros del árbol o del modelo seleccionado, que nosotros podemos configurar antes del entrenamiento. Son varios de ellos, pero nosotros decidimos trabajar con uno, en este caso max_depth"
      ],
      "metadata": {
        "id": "8tkFv5ts3cBn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def iniciar_arbol_decision(max_depth):\n",
        "    SEED = 301\n",
        "    np.random.seed(SEED)\n",
        "\n",
        "    cv = GroupKFold(n_splits = 10)\n",
        "    modelo = DecisionTreeClassifier(max_depth=max_depth)\n",
        "    results = cross_validate(modelo, x_ord, y_ord, cv = cv, groups = datos.modelo, return_train_score=True)\n",
        "    test_score = results['test_score'].mean()*100\n",
        "    train_score = results['train_score'].mean()*100\n",
        "    print('Arbol max_depth = %d, training = %.2f, testing = %.2f' % (max_depth, train_score, test_score))\n",
        "    tabla = [max_depth, train_score, test_score]\n",
        "    return tabla\n",
        "\n",
        "resultados = [iniciar_arbol_decision(i) for i in range(1,33)]\n",
        "resultados = pd.DataFrame(resultados, columns=['max_depth','train','test'])\n",
        "resultados.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 761
        },
        "id": "JzWf884T25VV",
        "outputId": "6e02dbfc-1be7-4b6f-d313-ea4da5a45673"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arbol max_depth = 1, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 3, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, training = 78.79, testing = 78.63\n",
            "Arbol max_depth = 5, training = 78.94, testing = 78.56\n",
            "Arbol max_depth = 6, training = 79.17, testing = 78.12\n",
            "Arbol max_depth = 7, training = 79.50, testing = 77.96\n",
            "Arbol max_depth = 8, training = 79.89, testing = 77.86\n",
            "Arbol max_depth = 9, training = 80.46, testing = 77.38\n",
            "Arbol max_depth = 10, training = 81.16, testing = 77.19\n",
            "Arbol max_depth = 11, training = 82.03, testing = 76.97\n",
            "Arbol max_depth = 12, training = 82.89, testing = 76.49\n",
            "Arbol max_depth = 13, training = 83.95, testing = 75.81\n",
            "Arbol max_depth = 14, training = 85.03, testing = 75.66\n",
            "Arbol max_depth = 15, training = 86.14, testing = 75.16\n",
            "Arbol max_depth = 16, training = 87.19, testing = 75.11\n",
            "Arbol max_depth = 17, training = 88.31, testing = 74.74\n",
            "Arbol max_depth = 18, training = 89.26, testing = 74.33\n",
            "Arbol max_depth = 19, training = 90.32, testing = 74.34\n",
            "Arbol max_depth = 20, training = 91.32, testing = 74.22\n",
            "Arbol max_depth = 21, training = 92.14, testing = 73.80\n",
            "Arbol max_depth = 22, training = 93.02, testing = 73.81\n",
            "Arbol max_depth = 23, training = 93.80, testing = 73.38\n",
            "Arbol max_depth = 24, training = 94.47, testing = 73.43\n",
            "Arbol max_depth = 25, training = 95.16, testing = 73.14\n",
            "Arbol max_depth = 26, training = 95.74, testing = 73.04\n",
            "Arbol max_depth = 27, training = 96.33, testing = 72.91\n",
            "Arbol max_depth = 28, training = 96.75, testing = 72.66\n",
            "Arbol max_depth = 29, training = 97.10, testing = 72.73\n",
            "Arbol max_depth = 30, training = 97.43, testing = 72.81\n",
            "Arbol max_depth = 31, training = 97.80, testing = 72.86\n",
            "Arbol max_depth = 32, training = 98.10, testing = 72.52\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   max_depth      train       test\n",
              "0          1  75.791169  75.784219\n",
              "1          2  75.791169  75.784219\n",
              "2          3  78.750993  78.672633\n",
              "3          4  78.787628  78.632803\n",
              "4          5  78.941007  78.555912"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3494b7a-4992-472b-9ec8-3c0350d9c002\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>78.787628</td>\n",
              "      <td>78.632803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>78.941007</td>\n",
              "      <td>78.555912</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3494b7a-4992-472b-9ec8-3c0350d9c002')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a3494b7a-4992-472b-9ec8-3c0350d9c002 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a3494b7a-4992-472b-9ec8-3c0350d9c002');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.lineplot(x='max_depth', y='train', data=resultados);\n",
        "sns.lineplot(x='max_depth', y='test', data=resultados);\n",
        "plt.legend(['Train','Test']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "13lbfxR_3Vyk",
        "outputId": "6daf7419-09b8-4f5e-bf42-903fa3dc0199"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "notamos que hay un overfitting de los datos, los resultados de entrenamientos aumentan mientras que los de test disminuyen.. los datso aprenden tanto del entrenamiento que al final solo sirven para eso, no consiguen asimilar nuevas reglas que vienen del escenario real donde vamos a colocar nuestro modelo para ejecutar"
      ],
      "metadata": {
        "id": "YdU67HdJ7iUk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "resultados.sort_values('test', ascending=False).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "wRTFzKJP9h-m",
        "outputId": "9636d872-1d0e-409f-87c8-868c872e16c0"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   max_depth      train       test\n",
              "2          3  78.750993  78.672633\n",
              "3          4  78.787628  78.632803\n",
              "4          5  78.941007  78.555912\n",
              "5          6  79.170115  78.123266\n",
              "6          7  79.496806  77.963185"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ae35049-9df0-4031-828f-dd7becf33151\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>78.787628</td>\n",
              "      <td>78.632803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>78.941007</td>\n",
              "      <td>78.555912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>79.170115</td>\n",
              "      <td>78.123266</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>79.496806</td>\n",
              "      <td>77.963185</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ae35049-9df0-4031-828f-dd7becf33151')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3ae35049-9df0-4031-828f-dd7becf33151 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3ae35049-9df0-4031-828f-dd7becf33151');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Entonces la mejor precisión para nuestros datos de prueba fue el árbol con profundidad 3.\n",
        "¿cuanto más profundo un árbol, mejor? Depende, va a ser mejor para los datos de entrenamiento, pero si no es mejor para el dato de prueba, para el dato real, entonces estamos viendo un overfitting.\n",
        "Ahora, el modelo por más profundo que sea, tampoco es bueno para los datos de entrenamiento, también tenemos otra casuística, tenemos un subfitting."
      ],
      "metadata": {
        "id": "yvesLgeI-YOM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Aula2: Explorando 2 dimensiones de hiper parámetros"
      ],
      "metadata": {
        "id": "0zAxFtfZ-3Sk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def iniciar_arbol_decision(max_depth, min_samples_leaf):\n",
        "    SEED = 301\n",
        "    np.random.seed(SEED)\n",
        "\n",
        "    cv = GroupKFold(n_splits = 10)\n",
        "    modelo = DecisionTreeClassifier(max_depth=max_depth, min_samples_leaf=min_samples_leaf)\n",
        "    results = cross_validate(modelo, x_ord, y_ord, cv = cv, groups = datos.modelo, return_train_score=True)\n",
        "    test_score = results['test_score'].mean()*100\n",
        "    train_score = results['train_score'].mean()*100\n",
        "    print('Arbol max_depth = %d, min_samples_leaf = %d, training = %.2f, testing = %.2f' % (max_depth, min_samples_leaf, train_score, test_score))\n",
        "    tabla = [max_depth, min_samples_leaf, train_score, test_score]\n",
        "    return tabla\n",
        "\n",
        "def buscar():\n",
        "  resultados = []\n",
        "  for max_depth in range(1,32):\n",
        "    for min_samples_leaf in [32, 64, 128, 256]:\n",
        "      tabla = iniciar_arbol_decision(max_depth, min_samples_leaf)\n",
        "      resultados.append(tabla)\n",
        "  resultados = pd.DataFrame(resultados, columns = ['max_depth', 'min_samples_leaf', 'train', 'test'])\n",
        "  return resultados\n",
        "\n",
        "resultados = buscar()\n",
        "resultados.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "HryqDMXeB9lj",
        "outputId": "75e00c23-60c7-4ea2-fdbd-2a8dee93fb42"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arbol max_depth = 1, min_samples_leaf = 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 3, min_samples_leaf = 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 5, min_samples_leaf = 32, training = 78.82, testing = 78.50\n",
            "Arbol max_depth = 5, min_samples_leaf = 64, training = 78.79, testing = 78.45\n",
            "Arbol max_depth = 5, min_samples_leaf = 128, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 256, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 6, min_samples_leaf = 32, training = 78.96, testing = 78.02\n",
            "Arbol max_depth = 6, min_samples_leaf = 64, training = 78.92, testing = 78.09\n",
            "Arbol max_depth = 6, min_samples_leaf = 128, training = 78.85, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 256, training = 78.79, testing = 78.27\n",
            "Arbol max_depth = 7, min_samples_leaf = 32, training = 79.24, testing = 77.94\n",
            "Arbol max_depth = 7, min_samples_leaf = 64, training = 79.18, testing = 78.05\n",
            "Arbol max_depth = 7, min_samples_leaf = 128, training = 79.01, testing = 78.21\n",
            "Arbol max_depth = 7, min_samples_leaf = 256, training = 78.85, testing = 78.08\n",
            "Arbol max_depth = 8, min_samples_leaf = 32, training = 79.47, testing = 77.93\n",
            "Arbol max_depth = 8, min_samples_leaf = 64, training = 79.30, testing = 77.99\n",
            "Arbol max_depth = 8, min_samples_leaf = 128, training = 79.05, testing = 78.37\n",
            "Arbol max_depth = 8, min_samples_leaf = 256, training = 78.89, testing = 77.94\n",
            "Arbol max_depth = 9, min_samples_leaf = 32, training = 79.80, testing = 77.32\n",
            "Arbol max_depth = 9, min_samples_leaf = 64, training = 79.46, testing = 77.55\n",
            "Arbol max_depth = 9, min_samples_leaf = 128, training = 79.12, testing = 78.30\n",
            "Arbol max_depth = 9, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 10, min_samples_leaf = 32, training = 80.05, testing = 77.45\n",
            "Arbol max_depth = 10, min_samples_leaf = 64, training = 79.55, testing = 77.64\n",
            "Arbol max_depth = 10, min_samples_leaf = 128, training = 79.16, testing = 78.29\n",
            "Arbol max_depth = 10, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 11, min_samples_leaf = 32, training = 80.21, testing = 77.20\n",
            "Arbol max_depth = 11, min_samples_leaf = 64, training = 79.60, testing = 77.53\n",
            "Arbol max_depth = 11, min_samples_leaf = 128, training = 79.19, testing = 78.31\n",
            "Arbol max_depth = 11, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 12, min_samples_leaf = 32, training = 80.34, testing = 77.00\n",
            "Arbol max_depth = 12, min_samples_leaf = 64, training = 79.72, testing = 77.29\n",
            "Arbol max_depth = 12, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 12, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 32, training = 80.51, testing = 76.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 64, training = 79.74, testing = 77.34\n",
            "Arbol max_depth = 13, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 13, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 14, min_samples_leaf = 32, training = 80.60, testing = 76.69\n",
            "Arbol max_depth = 14, min_samples_leaf = 64, training = 79.77, testing = 77.26\n",
            "Arbol max_depth = 14, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 14, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 15, min_samples_leaf = 32, training = 80.70, testing = 76.88\n",
            "Arbol max_depth = 15, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 15, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 15, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 16, min_samples_leaf = 32, training = 80.76, testing = 76.87\n",
            "Arbol max_depth = 16, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 16, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 16, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 17, min_samples_leaf = 32, training = 80.82, testing = 76.98\n",
            "Arbol max_depth = 17, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 17, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 17, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 18, min_samples_leaf = 32, training = 80.85, testing = 76.86\n",
            "Arbol max_depth = 18, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 18, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 18, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 19, min_samples_leaf = 32, training = 80.86, testing = 76.89\n",
            "Arbol max_depth = 19, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 19, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 19, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 20, min_samples_leaf = 32, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 20, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 20, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 20, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 21, min_samples_leaf = 32, training = 80.88, testing = 76.92\n",
            "Arbol max_depth = 21, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 21, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 21, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 22, min_samples_leaf = 32, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 22, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 22, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 22, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 23, min_samples_leaf = 32, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 23, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 23, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 23, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 24, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 24, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 24, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 24, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 25, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 25, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 25, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 25, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 26, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 26, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 26, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 26, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 27, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 27, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 27, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 27, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 28, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 28, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 28, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 28, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 29, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 29, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 29, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 29, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 30, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 30, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 30, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 30, min_samples_leaf = 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 31, min_samples_leaf = 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 31, min_samples_leaf = 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 31, min_samples_leaf = 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 31, min_samples_leaf = 256, training = 78.90, testing = 77.85\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   max_depth  min_samples_leaf      train       test\n",
              "0          1                32  75.791169  75.784219\n",
              "1          1                64  75.791169  75.784219\n",
              "2          1               128  75.791169  75.784219\n",
              "3          1               256  75.791169  75.784219\n",
              "4          2                32  75.791169  75.784219"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-438a4db7-53be-4b92-be4a-343bb98c9c1f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>128</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>256</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>32</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-438a4db7-53be-4b92-be4a-343bb98c9c1f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-438a4db7-53be-4b92-be4a-343bb98c9c1f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-438a4db7-53be-4b92-be4a-343bb98c9c1f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "resultados.sort_values('test', ascending=False).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dQ2cvE7qB9oA",
        "outputId": "e28139db-bd85-4c6c-9d73-0aacdff31102"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    max_depth  min_samples_leaf      train       test\n",
              "11          3               256  78.750993  78.672633\n",
              "8           3                32  78.750993  78.672633\n",
              "15          4               256  78.750993  78.672633\n",
              "14          4               128  78.750993  78.672633\n",
              "13          4                64  78.750993  78.672633"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-14b7c22d-e28e-4792-ad77-f72753326a18\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>3</td>\n",
              "      <td>256</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4</td>\n",
              "      <td>256</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>4</td>\n",
              "      <td>128</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>4</td>\n",
              "      <td>64</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14b7c22d-e28e-4792-ad77-f72753326a18')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-14b7c22d-e28e-4792-ad77-f72753326a18 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-14b7c22d-e28e-4792-ad77-f72753326a18');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nosotros tenemos que encontrar la mejor manera de descubrir qué valores seleccionar para nuestra búsqueda de nuestros espacios de parámetros.\n",
        "Yo he seleccionado cuatro al azar. Pero nosotros tenemos que encontrar la mejor manera de saber cuáles valores podemos colocar en nuestra lista, y para eso existe un método llamado matriz de correlación."
      ],
      "metadata": {
        "id": "h6--p6j_F1m-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "corr = resultados.corr()\n",
        "corr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "Dzxn55K_F4Ey",
        "outputId": "713da8e6-5b68-4c3a-d8e5-e497aacc2aa7"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     max_depth  min_samples_leaf     train      test\n",
              "max_depth         1.000000e+00     -2.819789e-16  0.546146 -0.024381\n",
              "min_samples_leaf -2.819789e-16      1.000000e+00 -0.401773  0.341805\n",
              "train             5.461464e-01     -4.017734e-01  1.000000  0.133720\n",
              "test             -2.438091e-02      3.418055e-01  0.133720  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b130307-c832-46ae-972b-35f7a0499bec\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>max_depth</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>-2.819789e-16</td>\n",
              "      <td>0.546146</td>\n",
              "      <td>-0.024381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <td>-2.819789e-16</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>-0.401773</td>\n",
              "      <td>0.341805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>train</th>\n",
              "      <td>5.461464e-01</td>\n",
              "      <td>-4.017734e-01</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.133720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test</th>\n",
              "      <td>-2.438091e-02</td>\n",
              "      <td>3.418055e-01</td>\n",
              "      <td>0.133720</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b130307-c832-46ae-972b-35f7a0499bec')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9b130307-c832-46ae-972b-35f7a0499bec button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9b130307-c832-46ae-972b-35f7a0499bec');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "notamos que a mayor max_depth disminuyen los resultados de test y aumentan los de train\n",
        "mientras que a mayor min_samples_leaf disminuyen los de train y aumentan los de test"
      ],
      "metadata": {
        "id": "Tbz16-B9PMdx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(corr);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "nlSLiqiuPuGi",
        "outputId": "8bd729ea-f791-4273-e260-3334904fc547"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas.plotting import scatter_matrix\n",
        "scatter_matrix(resultados, figsize=(14,8), alpha=0.3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 981
        },
        "id": "6WMvkV9qPw8t",
        "outputId": "24c1b5fb-621d-4a86-8df3-c15daa1b346d"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: xlabel='max_depth', ylabel='max_depth'>,\n",
              "        <Axes: xlabel='min_samples_leaf', ylabel='max_depth'>,\n",
              "        <Axes: xlabel='train', ylabel='max_depth'>,\n",
              "        <Axes: xlabel='test', ylabel='max_depth'>],\n",
              "       [<Axes: xlabel='max_depth', ylabel='min_samples_leaf'>,\n",
              "        <Axes: xlabel='min_samples_leaf', ylabel='min_samples_leaf'>,\n",
              "        <Axes: xlabel='train', ylabel='min_samples_leaf'>,\n",
              "        <Axes: xlabel='test', ylabel='min_samples_leaf'>],\n",
              "       [<Axes: xlabel='max_depth', ylabel='train'>,\n",
              "        <Axes: xlabel='min_samples_leaf', ylabel='train'>,\n",
              "        <Axes: xlabel='train', ylabel='train'>,\n",
              "        <Axes: xlabel='test', ylabel='train'>],\n",
              "       [<Axes: xlabel='max_depth', ylabel='test'>,\n",
              "        <Axes: xlabel='min_samples_leaf', ylabel='test'>,\n",
              "        <Axes: xlabel='train', ylabel='test'>,\n",
              "        <Axes: xlabel='test', ylabel='test'>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "notamos que a mayor max_depth disminuyen los resultados de test y aumentan los de train mientras que a mayor min_samples_leaf disminuyen los de train y aumentan los de test"
      ],
      "metadata": {
        "id": "lKeFXREkQS1G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(resultados)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "IODVcVSxQ3a3",
        "outputId": "9cabebce-8c47-464f-9a7d-a83913c950c8"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7fea5a8bda60>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Seaborn Correlation\n",
        "\n",
        "from string import ascii_letters\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.set_theme(style=\"white\")\n",
        "\n",
        "# Generate a mask for the upper triangle\n",
        "mask = np.triu(np.ones_like(corr, dtype=bool))\n",
        "\n",
        "# Set up the matplotlib figure\n",
        "f, ax = plt.subplots(figsize=(11, 9))\n",
        "\n",
        "# Generate a custom diverging colormap\n",
        "cmap = sns.diverging_palette(230, 20, as_cmap=True)\n",
        "\n",
        "# Draw the heatmap with the mask and correct aspect ratio\n",
        "sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n",
        "            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 765
        },
        "id": "byx1mzjfQ3kW",
        "outputId": "edc812e6-6ac9-4e92-9b4c-73f18d13a959"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1100x900 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "notamos que la correlacion adecuada para mejorar los resultados de test seria un bajo valor de max_depth y un alto valor de min_sample_leaf"
      ],
      "metadata": {
        "id": "_npy90Y9SLAh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def buscar():\n",
        "  resultados = []\n",
        "  for max_depth in range(1,10):\n",
        "    for min_samples_leaf in [128, 190, 220, 256]:\n",
        "      tabla = iniciar_arbol_decision(max_depth, min_samples_leaf)\n",
        "      resultados.append(tabla)\n",
        "  resultados = pd.DataFrame(resultados, columns = ['max_depth', 'min_samples_leaf', 'train', 'test'])\n",
        "  return resultados\n",
        "\n",
        "resultados = buscar()\n",
        "resultados.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 831
        },
        "id": "r8GAl6oYSLDQ",
        "outputId": "d00e474f-d755-4e25-ac7a-38ed819cc1fe"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arbol max_depth = 1, min_samples_leaf = 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 190, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 220, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 190, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 220, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 3, min_samples_leaf = 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 190, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 220, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 190, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 220, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 5, min_samples_leaf = 128, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 190, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 220, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 256, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 6, min_samples_leaf = 128, training = 78.85, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 190, training = 78.79, testing = 78.31\n",
            "Arbol max_depth = 6, min_samples_leaf = 220, training = 78.79, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 256, training = 78.79, testing = 78.27\n",
            "Arbol max_depth = 7, min_samples_leaf = 128, training = 79.01, testing = 78.21\n",
            "Arbol max_depth = 7, min_samples_leaf = 190, training = 78.92, testing = 78.05\n",
            "Arbol max_depth = 7, min_samples_leaf = 220, training = 78.89, testing = 78.04\n",
            "Arbol max_depth = 7, min_samples_leaf = 256, training = 78.85, testing = 78.08\n",
            "Arbol max_depth = 8, min_samples_leaf = 128, training = 79.05, testing = 78.37\n",
            "Arbol max_depth = 8, min_samples_leaf = 190, training = 78.98, testing = 78.15\n",
            "Arbol max_depth = 8, min_samples_leaf = 220, training = 78.95, testing = 78.03\n",
            "Arbol max_depth = 8, min_samples_leaf = 256, training = 78.89, testing = 77.94\n",
            "Arbol max_depth = 9, min_samples_leaf = 128, training = 79.12, testing = 78.30\n",
            "Arbol max_depth = 9, min_samples_leaf = 190, training = 79.00, testing = 78.06\n",
            "Arbol max_depth = 9, min_samples_leaf = 220, training = 78.97, testing = 77.80\n",
            "Arbol max_depth = 9, min_samples_leaf = 256, training = 78.90, testing = 77.85\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   max_depth  min_samples_leaf      train       test\n",
              "0          1               128  75.791169  75.784219\n",
              "1          1               190  75.791169  75.784219\n",
              "2          1               220  75.791169  75.784219\n",
              "3          1               256  75.791169  75.784219\n",
              "4          2               128  75.791169  75.784219"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-499fb59e-6c86-4fd3-b072-cd9af8d2cb10\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>128</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>190</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>220</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>256</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>128</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-499fb59e-6c86-4fd3-b072-cd9af8d2cb10')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-499fb59e-6c86-4fd3-b072-cd9af8d2cb10 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-499fb59e-6c86-4fd3-b072-cd9af8d2cb10');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "resultados.sort_values('test', ascending=False).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "MONqrXlmSLNf",
        "outputId": "a71707b7-3b35-4e4f-d4c8-9ab694441a72"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    max_depth  min_samples_leaf      train       test\n",
              "13          4               190  78.750993  78.672633\n",
              "11          3               256  78.750993  78.672633\n",
              "15          4               256  78.750993  78.672633\n",
              "14          4               220  78.750993  78.672633\n",
              "12          4               128  78.750993  78.672633"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39dc0997-0afd-408b-b671-53450cd1551e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>4</td>\n",
              "      <td>190</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>3</td>\n",
              "      <td>256</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4</td>\n",
              "      <td>256</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>4</td>\n",
              "      <td>220</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>4</td>\n",
              "      <td>128</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39dc0997-0afd-408b-b671-53450cd1551e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-39dc0997-0afd-408b-b671-53450cd1551e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-39dc0997-0afd-408b-b671-53450cd1551e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Aula3: Trabajando con 3 ó más dimensiones"
      ],
      "metadata": {
        "id": "EMlQHR57St70"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def iniciar_arbol_decision(max_depth, min_samples_leaf, min_samples_split):\n",
        "    SEED = 301\n",
        "    np.random.seed(SEED)\n",
        "\n",
        "    cv = GroupKFold(n_splits = 10)\n",
        "    modelo = DecisionTreeClassifier(max_depth=max_depth, min_samples_leaf=min_samples_leaf, min_samples_split=min_samples_split)\n",
        "    results = cross_validate(modelo, x_ord, y_ord, cv = cv, groups = datos.modelo, return_train_score=True)\n",
        "    test_score = results['test_score'].mean()*100\n",
        "    train_score = results['train_score'].mean()*100\n",
        "    fit_time = results['fit_time'].mean()\n",
        "    score_time = results['score_time'].mean()\n",
        "    print('Arbol max_depth = %d, min_samples_leaf = %d, min_samples_split= %d, training = %.2f, testing = %.2f' % (max_depth, min_samples_leaf, min_samples_split, train_score, test_score))\n",
        "    tabla = [max_depth, min_samples_leaf, min_samples_split, train_score, test_score, fit_time, score_time]\n",
        "    return tabla\n",
        "\n",
        "def buscar():\n",
        "  resultados = []\n",
        "  for max_depth in range(1,32):\n",
        "    for min_samples_leaf in [32, 64, 128, 256]:\n",
        "      for min_samples_split in [32, 64, 128, 256]:\n",
        "        tabla = iniciar_arbol_decision(max_depth, min_samples_leaf, min_samples_split)\n",
        "        resultados.append(tabla)\n",
        "  resultados = pd.DataFrame(resultados, columns = ['max_depth', 'min_samples_leaf', 'min_samples_split', 'train', 'test', 'fit_time', 'score_time'])\n",
        "  return resultados\n",
        "\n",
        "resultados = buscar()\n",
        "resultados.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "UMbRMkk_UDiY",
        "outputId": "604cb50d-43dc-42a0-fb6d-707153c20e41"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arbol max_depth = 1, min_samples_leaf = 32, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 32, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 32, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 32, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 64, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 64, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 64, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 64, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 128, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 128, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 128, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 128, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 256, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 256, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 256, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 1, min_samples_leaf = 256, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 32, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 32, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 32, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 32, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 64, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 64, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 64, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 64, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 128, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 128, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 128, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 128, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 256, min_samples_split= 32, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 256, min_samples_split= 64, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 256, min_samples_split= 128, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 2, min_samples_leaf = 256, min_samples_split= 256, training = 75.79, testing = 75.78\n",
            "Arbol max_depth = 3, min_samples_leaf = 32, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 32, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 32, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 32, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 64, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 64, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 64, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 64, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 128, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 128, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 128, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 128, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 256, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 256, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 256, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 3, min_samples_leaf = 256, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 32, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 32, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 32, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 32, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 64, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 64, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 64, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 64, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 128, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 128, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 128, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 128, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 256, min_samples_split= 32, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 256, min_samples_split= 64, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 256, min_samples_split= 128, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 4, min_samples_leaf = 256, min_samples_split= 256, training = 78.75, testing = 78.67\n",
            "Arbol max_depth = 5, min_samples_leaf = 32, min_samples_split= 32, training = 78.82, testing = 78.50\n",
            "Arbol max_depth = 5, min_samples_leaf = 32, min_samples_split= 64, training = 78.82, testing = 78.50\n",
            "Arbol max_depth = 5, min_samples_leaf = 32, min_samples_split= 128, training = 78.82, testing = 78.50\n",
            "Arbol max_depth = 5, min_samples_leaf = 32, min_samples_split= 256, training = 78.82, testing = 78.50\n",
            "Arbol max_depth = 5, min_samples_leaf = 64, min_samples_split= 32, training = 78.79, testing = 78.45\n",
            "Arbol max_depth = 5, min_samples_leaf = 64, min_samples_split= 64, training = 78.79, testing = 78.45\n",
            "Arbol max_depth = 5, min_samples_leaf = 64, min_samples_split= 128, training = 78.79, testing = 78.45\n",
            "Arbol max_depth = 5, min_samples_leaf = 64, min_samples_split= 256, training = 78.79, testing = 78.45\n",
            "Arbol max_depth = 5, min_samples_leaf = 128, min_samples_split= 32, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 128, min_samples_split= 64, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 128, min_samples_split= 128, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 128, min_samples_split= 256, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 256, min_samples_split= 32, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 256, min_samples_split= 64, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 256, min_samples_split= 128, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 5, min_samples_leaf = 256, min_samples_split= 256, training = 78.77, testing = 78.44\n",
            "Arbol max_depth = 6, min_samples_leaf = 32, min_samples_split= 32, training = 78.96, testing = 78.02\n",
            "Arbol max_depth = 6, min_samples_leaf = 32, min_samples_split= 64, training = 78.96, testing = 78.02\n",
            "Arbol max_depth = 6, min_samples_leaf = 32, min_samples_split= 128, training = 78.95, testing = 78.03\n",
            "Arbol max_depth = 6, min_samples_leaf = 32, min_samples_split= 256, training = 78.91, testing = 78.16\n",
            "Arbol max_depth = 6, min_samples_leaf = 64, min_samples_split= 32, training = 78.92, testing = 78.09\n",
            "Arbol max_depth = 6, min_samples_leaf = 64, min_samples_split= 64, training = 78.92, testing = 78.09\n",
            "Arbol max_depth = 6, min_samples_leaf = 64, min_samples_split= 128, training = 78.92, testing = 78.09\n",
            "Arbol max_depth = 6, min_samples_leaf = 64, min_samples_split= 256, training = 78.89, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 128, min_samples_split= 32, training = 78.85, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 128, min_samples_split= 64, training = 78.85, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 128, min_samples_split= 128, training = 78.85, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 128, min_samples_split= 256, training = 78.85, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 256, min_samples_split= 32, training = 78.79, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 256, min_samples_split= 64, training = 78.79, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 256, min_samples_split= 128, training = 78.79, testing = 78.27\n",
            "Arbol max_depth = 6, min_samples_leaf = 256, min_samples_split= 256, training = 78.79, testing = 78.27\n",
            "Arbol max_depth = 7, min_samples_leaf = 32, min_samples_split= 32, training = 79.24, testing = 77.94\n",
            "Arbol max_depth = 7, min_samples_leaf = 32, min_samples_split= 64, training = 79.24, testing = 77.94\n",
            "Arbol max_depth = 7, min_samples_leaf = 32, min_samples_split= 128, training = 79.15, testing = 77.87\n",
            "Arbol max_depth = 7, min_samples_leaf = 32, min_samples_split= 256, training = 79.08, testing = 78.09\n",
            "Arbol max_depth = 7, min_samples_leaf = 64, min_samples_split= 32, training = 79.18, testing = 78.05\n",
            "Arbol max_depth = 7, min_samples_leaf = 64, min_samples_split= 64, training = 79.18, testing = 78.05\n",
            "Arbol max_depth = 7, min_samples_leaf = 64, min_samples_split= 128, training = 79.18, testing = 78.05\n",
            "Arbol max_depth = 7, min_samples_leaf = 64, min_samples_split= 256, training = 79.05, testing = 78.27\n",
            "Arbol max_depth = 7, min_samples_leaf = 128, min_samples_split= 32, training = 79.01, testing = 78.21\n",
            "Arbol max_depth = 7, min_samples_leaf = 128, min_samples_split= 64, training = 79.01, testing = 78.21\n",
            "Arbol max_depth = 7, min_samples_leaf = 128, min_samples_split= 128, training = 79.01, testing = 78.21\n",
            "Arbol max_depth = 7, min_samples_leaf = 128, min_samples_split= 256, training = 79.01, testing = 78.21\n",
            "Arbol max_depth = 7, min_samples_leaf = 256, min_samples_split= 32, training = 78.85, testing = 78.08\n",
            "Arbol max_depth = 7, min_samples_leaf = 256, min_samples_split= 64, training = 78.85, testing = 78.08\n",
            "Arbol max_depth = 7, min_samples_leaf = 256, min_samples_split= 128, training = 78.85, testing = 78.08\n",
            "Arbol max_depth = 7, min_samples_leaf = 256, min_samples_split= 256, training = 78.85, testing = 78.08\n",
            "Arbol max_depth = 8, min_samples_leaf = 32, min_samples_split= 32, training = 79.47, testing = 77.93\n",
            "Arbol max_depth = 8, min_samples_leaf = 32, min_samples_split= 64, training = 79.47, testing = 77.93\n",
            "Arbol max_depth = 8, min_samples_leaf = 32, min_samples_split= 128, training = 79.31, testing = 77.87\n",
            "Arbol max_depth = 8, min_samples_leaf = 32, min_samples_split= 256, training = 79.14, testing = 78.04\n",
            "Arbol max_depth = 8, min_samples_leaf = 64, min_samples_split= 32, training = 79.30, testing = 77.99\n",
            "Arbol max_depth = 8, min_samples_leaf = 64, min_samples_split= 64, training = 79.30, testing = 77.99\n",
            "Arbol max_depth = 8, min_samples_leaf = 64, min_samples_split= 128, training = 79.30, testing = 77.99\n",
            "Arbol max_depth = 8, min_samples_leaf = 64, min_samples_split= 256, training = 79.10, testing = 78.28\n",
            "Arbol max_depth = 8, min_samples_leaf = 128, min_samples_split= 32, training = 79.05, testing = 78.37\n",
            "Arbol max_depth = 8, min_samples_leaf = 128, min_samples_split= 64, training = 79.05, testing = 78.37\n",
            "Arbol max_depth = 8, min_samples_leaf = 128, min_samples_split= 128, training = 79.05, testing = 78.37\n",
            "Arbol max_depth = 8, min_samples_leaf = 128, min_samples_split= 256, training = 79.05, testing = 78.37\n",
            "Arbol max_depth = 8, min_samples_leaf = 256, min_samples_split= 32, training = 78.89, testing = 77.94\n",
            "Arbol max_depth = 8, min_samples_leaf = 256, min_samples_split= 64, training = 78.89, testing = 77.94\n",
            "Arbol max_depth = 8, min_samples_leaf = 256, min_samples_split= 128, training = 78.89, testing = 77.94\n",
            "Arbol max_depth = 8, min_samples_leaf = 256, min_samples_split= 256, training = 78.89, testing = 77.94\n",
            "Arbol max_depth = 9, min_samples_leaf = 32, min_samples_split= 32, training = 79.80, testing = 77.32\n",
            "Arbol max_depth = 9, min_samples_leaf = 32, min_samples_split= 64, training = 79.80, testing = 77.32\n",
            "Arbol max_depth = 9, min_samples_leaf = 32, min_samples_split= 128, training = 79.51, testing = 77.32\n",
            "Arbol max_depth = 9, min_samples_leaf = 32, min_samples_split= 256, training = 79.25, testing = 77.77\n",
            "Arbol max_depth = 9, min_samples_leaf = 64, min_samples_split= 32, training = 79.46, testing = 77.55\n",
            "Arbol max_depth = 9, min_samples_leaf = 64, min_samples_split= 64, training = 79.46, testing = 77.55\n",
            "Arbol max_depth = 9, min_samples_leaf = 64, min_samples_split= 128, training = 79.46, testing = 77.55\n",
            "Arbol max_depth = 9, min_samples_leaf = 64, min_samples_split= 256, training = 79.18, testing = 78.07\n",
            "Arbol max_depth = 9, min_samples_leaf = 128, min_samples_split= 32, training = 79.12, testing = 78.30\n",
            "Arbol max_depth = 9, min_samples_leaf = 128, min_samples_split= 64, training = 79.12, testing = 78.30\n",
            "Arbol max_depth = 9, min_samples_leaf = 128, min_samples_split= 128, training = 79.12, testing = 78.30\n",
            "Arbol max_depth = 9, min_samples_leaf = 128, min_samples_split= 256, training = 79.12, testing = 78.30\n",
            "Arbol max_depth = 9, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 9, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 9, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 9, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 10, min_samples_leaf = 32, min_samples_split= 32, training = 80.05, testing = 77.45\n",
            "Arbol max_depth = 10, min_samples_leaf = 32, min_samples_split= 64, training = 80.05, testing = 77.45\n",
            "Arbol max_depth = 10, min_samples_leaf = 32, min_samples_split= 128, training = 79.62, testing = 77.17\n",
            "Arbol max_depth = 10, min_samples_leaf = 32, min_samples_split= 256, training = 79.31, testing = 77.67\n",
            "Arbol max_depth = 10, min_samples_leaf = 64, min_samples_split= 32, training = 79.55, testing = 77.64\n",
            "Arbol max_depth = 10, min_samples_leaf = 64, min_samples_split= 64, training = 79.55, testing = 77.64\n",
            "Arbol max_depth = 10, min_samples_leaf = 64, min_samples_split= 128, training = 79.55, testing = 77.64\n",
            "Arbol max_depth = 10, min_samples_leaf = 64, min_samples_split= 256, training = 79.23, testing = 78.17\n",
            "Arbol max_depth = 10, min_samples_leaf = 128, min_samples_split= 32, training = 79.16, testing = 78.29\n",
            "Arbol max_depth = 10, min_samples_leaf = 128, min_samples_split= 64, training = 79.16, testing = 78.29\n",
            "Arbol max_depth = 10, min_samples_leaf = 128, min_samples_split= 128, training = 79.16, testing = 78.29\n",
            "Arbol max_depth = 10, min_samples_leaf = 128, min_samples_split= 256, training = 79.16, testing = 78.29\n",
            "Arbol max_depth = 10, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 10, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 10, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 10, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 11, min_samples_leaf = 32, min_samples_split= 32, training = 80.21, testing = 77.20\n",
            "Arbol max_depth = 11, min_samples_leaf = 32, min_samples_split= 64, training = 80.21, testing = 77.20\n",
            "Arbol max_depth = 11, min_samples_leaf = 32, min_samples_split= 128, training = 79.71, testing = 77.19\n",
            "Arbol max_depth = 11, min_samples_leaf = 32, min_samples_split= 256, training = 79.35, testing = 77.64\n",
            "Arbol max_depth = 11, min_samples_leaf = 64, min_samples_split= 32, training = 79.60, testing = 77.53\n",
            "Arbol max_depth = 11, min_samples_leaf = 64, min_samples_split= 64, training = 79.60, testing = 77.53\n",
            "Arbol max_depth = 11, min_samples_leaf = 64, min_samples_split= 128, training = 79.60, testing = 77.53\n",
            "Arbol max_depth = 11, min_samples_leaf = 64, min_samples_split= 256, training = 79.27, testing = 78.11\n",
            "Arbol max_depth = 11, min_samples_leaf = 128, min_samples_split= 32, training = 79.19, testing = 78.31\n",
            "Arbol max_depth = 11, min_samples_leaf = 128, min_samples_split= 64, training = 79.19, testing = 78.31\n",
            "Arbol max_depth = 11, min_samples_leaf = 128, min_samples_split= 128, training = 79.19, testing = 78.31\n",
            "Arbol max_depth = 11, min_samples_leaf = 128, min_samples_split= 256, training = 79.19, testing = 78.31\n",
            "Arbol max_depth = 11, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 11, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 11, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 11, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 12, min_samples_leaf = 32, min_samples_split= 32, training = 80.34, testing = 77.00\n",
            "Arbol max_depth = 12, min_samples_leaf = 32, min_samples_split= 64, training = 80.34, testing = 77.00\n",
            "Arbol max_depth = 12, min_samples_leaf = 32, min_samples_split= 128, training = 79.78, testing = 76.99\n",
            "Arbol max_depth = 12, min_samples_leaf = 32, min_samples_split= 256, training = 79.38, testing = 77.47\n",
            "Arbol max_depth = 12, min_samples_leaf = 64, min_samples_split= 32, training = 79.72, testing = 77.29\n",
            "Arbol max_depth = 12, min_samples_leaf = 64, min_samples_split= 64, training = 79.72, testing = 77.29\n",
            "Arbol max_depth = 12, min_samples_leaf = 64, min_samples_split= 128, training = 79.72, testing = 77.29\n",
            "Arbol max_depth = 12, min_samples_leaf = 64, min_samples_split= 256, training = 79.31, testing = 78.09\n",
            "Arbol max_depth = 12, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 12, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 12, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 12, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 12, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 12, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 12, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 12, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 32, min_samples_split= 32, training = 80.51, testing = 76.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 32, min_samples_split= 64, training = 80.51, testing = 76.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 32, min_samples_split= 128, training = 79.91, testing = 76.95\n",
            "Arbol max_depth = 13, min_samples_leaf = 32, min_samples_split= 256, training = 79.43, testing = 77.42\n",
            "Arbol max_depth = 13, min_samples_leaf = 64, min_samples_split= 32, training = 79.74, testing = 77.34\n",
            "Arbol max_depth = 13, min_samples_leaf = 64, min_samples_split= 64, training = 79.74, testing = 77.34\n",
            "Arbol max_depth = 13, min_samples_leaf = 64, min_samples_split= 128, training = 79.74, testing = 77.34\n",
            "Arbol max_depth = 13, min_samples_leaf = 64, min_samples_split= 256, training = 79.31, testing = 78.09\n",
            "Arbol max_depth = 13, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 13, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 13, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 13, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 13, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 13, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 14, min_samples_leaf = 32, min_samples_split= 32, training = 80.60, testing = 76.69\n",
            "Arbol max_depth = 14, min_samples_leaf = 32, min_samples_split= 64, training = 80.60, testing = 76.69\n",
            "Arbol max_depth = 14, min_samples_leaf = 32, min_samples_split= 128, training = 79.95, testing = 76.79\n",
            "Arbol max_depth = 14, min_samples_leaf = 32, min_samples_split= 256, training = 79.45, testing = 77.36\n",
            "Arbol max_depth = 14, min_samples_leaf = 64, min_samples_split= 32, training = 79.77, testing = 77.26\n",
            "Arbol max_depth = 14, min_samples_leaf = 64, min_samples_split= 64, training = 79.77, testing = 77.26\n",
            "Arbol max_depth = 14, min_samples_leaf = 64, min_samples_split= 128, training = 79.77, testing = 77.26\n",
            "Arbol max_depth = 14, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 14, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 14, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 14, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 14, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 14, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 14, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 14, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 14, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 15, min_samples_leaf = 32, min_samples_split= 32, training = 80.70, testing = 76.88\n",
            "Arbol max_depth = 15, min_samples_leaf = 32, min_samples_split= 64, training = 80.70, testing = 76.88\n",
            "Arbol max_depth = 15, min_samples_leaf = 32, min_samples_split= 128, training = 80.00, testing = 76.87\n",
            "Arbol max_depth = 15, min_samples_leaf = 32, min_samples_split= 256, training = 79.48, testing = 77.35\n",
            "Arbol max_depth = 15, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 15, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 15, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 15, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 15, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 15, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 15, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 15, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 15, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 15, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 15, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 15, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 16, min_samples_leaf = 32, min_samples_split= 32, training = 80.76, testing = 76.87\n",
            "Arbol max_depth = 16, min_samples_leaf = 32, min_samples_split= 64, training = 80.76, testing = 76.87\n",
            "Arbol max_depth = 16, min_samples_leaf = 32, min_samples_split= 128, training = 80.04, testing = 76.85\n",
            "Arbol max_depth = 16, min_samples_leaf = 32, min_samples_split= 256, training = 79.48, testing = 77.36\n",
            "Arbol max_depth = 16, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 16, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 16, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 16, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 16, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 16, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 16, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 16, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 16, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 16, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 16, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 16, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 17, min_samples_leaf = 32, min_samples_split= 32, training = 80.82, testing = 76.98\n",
            "Arbol max_depth = 17, min_samples_leaf = 32, min_samples_split= 64, training = 80.82, testing = 76.98\n",
            "Arbol max_depth = 17, min_samples_leaf = 32, min_samples_split= 128, training = 80.08, testing = 76.91\n",
            "Arbol max_depth = 17, min_samples_leaf = 32, min_samples_split= 256, training = 79.49, testing = 77.39\n",
            "Arbol max_depth = 17, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 17, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 17, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 17, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 17, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 17, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 17, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 17, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 17, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 17, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 17, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 17, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 18, min_samples_leaf = 32, min_samples_split= 32, training = 80.85, testing = 76.86\n",
            "Arbol max_depth = 18, min_samples_leaf = 32, min_samples_split= 64, training = 80.85, testing = 76.86\n",
            "Arbol max_depth = 18, min_samples_leaf = 32, min_samples_split= 128, training = 80.09, testing = 76.91\n",
            "Arbol max_depth = 18, min_samples_leaf = 32, min_samples_split= 256, training = 79.50, testing = 77.39\n",
            "Arbol max_depth = 18, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 18, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 18, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 18, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 18, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 18, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 18, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 18, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 18, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 18, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 18, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 18, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 19, min_samples_leaf = 32, min_samples_split= 32, training = 80.86, testing = 76.89\n",
            "Arbol max_depth = 19, min_samples_leaf = 32, min_samples_split= 64, training = 80.86, testing = 76.89\n",
            "Arbol max_depth = 19, min_samples_leaf = 32, min_samples_split= 128, training = 80.10, testing = 76.94\n",
            "Arbol max_depth = 19, min_samples_leaf = 32, min_samples_split= 256, training = 79.51, testing = 77.42\n",
            "Arbol max_depth = 19, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 19, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 19, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 19, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 19, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 19, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 19, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 19, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 19, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 19, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 19, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 19, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 20, min_samples_leaf = 32, min_samples_split= 32, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 20, min_samples_leaf = 32, min_samples_split= 64, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 20, min_samples_leaf = 32, min_samples_split= 128, training = 80.11, testing = 76.96\n",
            "Arbol max_depth = 20, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 20, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 20, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 20, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 20, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 20, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 20, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 20, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 20, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 20, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 20, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 20, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 20, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 21, min_samples_leaf = 32, min_samples_split= 32, training = 80.88, testing = 76.92\n",
            "Arbol max_depth = 21, min_samples_leaf = 32, min_samples_split= 64, training = 80.88, testing = 76.92\n",
            "Arbol max_depth = 21, min_samples_leaf = 32, min_samples_split= 128, training = 80.11, testing = 76.96\n",
            "Arbol max_depth = 21, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 21, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 21, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 21, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 21, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 21, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 21, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 21, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 21, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 21, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 21, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 21, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 21, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 22, min_samples_leaf = 32, min_samples_split= 32, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 22, min_samples_leaf = 32, min_samples_split= 64, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 22, min_samples_leaf = 32, min_samples_split= 128, training = 80.11, testing = 76.96\n",
            "Arbol max_depth = 22, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 22, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 22, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 22, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 22, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 22, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 22, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 22, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 22, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 22, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 22, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 22, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 22, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 23, min_samples_leaf = 32, min_samples_split= 32, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 23, min_samples_leaf = 32, min_samples_split= 64, training = 80.88, testing = 76.87\n",
            "Arbol max_depth = 23, min_samples_leaf = 32, min_samples_split= 128, training = 80.11, testing = 76.96\n",
            "Arbol max_depth = 23, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 23, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 23, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 23, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 23, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 23, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 23, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 23, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 23, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 23, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 23, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 23, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 23, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 24, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 24, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 24, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 24, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 24, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 24, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 24, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 24, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 24, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 24, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 24, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 24, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 24, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 24, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 24, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 24, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 25, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 25, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 25, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 25, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 25, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 25, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 25, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 25, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 25, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 25, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 25, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 25, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 25, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 25, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 25, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 25, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 26, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 26, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 26, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 26, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 26, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 26, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 26, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 26, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 26, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 26, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 26, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 26, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 26, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 26, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 26, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 26, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 27, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 27, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 27, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 27, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 27, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 27, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 27, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 27, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 27, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 27, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 27, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 27, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 27, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 27, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 27, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 27, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 28, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 28, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 28, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 28, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 28, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 28, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 28, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 28, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 28, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 28, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 28, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 28, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 28, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 28, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 28, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 28, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 29, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 29, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 29, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 29, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 29, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 29, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 29, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 29, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 29, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 29, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 29, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 29, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 29, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 29, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 29, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 29, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 30, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 30, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 30, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 30, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 30, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 30, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 30, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 30, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 30, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 30, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 30, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 30, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 30, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 30, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 30, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 30, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 31, min_samples_leaf = 32, min_samples_split= 32, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 31, min_samples_leaf = 32, min_samples_split= 64, training = 80.89, testing = 76.84\n",
            "Arbol max_depth = 31, min_samples_leaf = 32, min_samples_split= 128, training = 80.12, testing = 76.93\n",
            "Arbol max_depth = 31, min_samples_leaf = 32, min_samples_split= 256, training = 79.52, testing = 77.44\n",
            "Arbol max_depth = 31, min_samples_leaf = 64, min_samples_split= 32, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 31, min_samples_leaf = 64, min_samples_split= 64, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 31, min_samples_leaf = 64, min_samples_split= 128, training = 79.79, testing = 77.30\n",
            "Arbol max_depth = 31, min_samples_leaf = 64, min_samples_split= 256, training = 79.33, testing = 77.99\n",
            "Arbol max_depth = 31, min_samples_leaf = 128, min_samples_split= 32, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 31, min_samples_leaf = 128, min_samples_split= 64, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 31, min_samples_leaf = 128, min_samples_split= 128, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 31, min_samples_leaf = 128, min_samples_split= 256, training = 79.21, testing = 78.22\n",
            "Arbol max_depth = 31, min_samples_leaf = 256, min_samples_split= 32, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 31, min_samples_leaf = 256, min_samples_split= 64, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 31, min_samples_leaf = 256, min_samples_split= 128, training = 78.90, testing = 77.85\n",
            "Arbol max_depth = 31, min_samples_leaf = 256, min_samples_split= 256, training = 78.90, testing = 77.85\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   max_depth  min_samples_leaf  min_samples_split      train       test  \\\n",
              "0          1                32                 32  75.791169  75.784219   \n",
              "1          1                32                 64  75.791169  75.784219   \n",
              "2          1                32                128  75.791169  75.784219   \n",
              "3          1                32                256  75.791169  75.784219   \n",
              "4          1                64                 32  75.791169  75.784219   \n",
              "\n",
              "   fit_time  score_time  \n",
              "0  0.007385    0.002805  \n",
              "1  0.006688    0.002400  \n",
              "2  0.006742    0.002387  \n",
              "3  0.006850    0.002879  \n",
              "4  0.006901    0.003029  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98b73248-8994-44a1-b5e6-724d361f6120\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <th>min_samples_split</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "      <th>fit_time</th>\n",
              "      <th>score_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "      <td>0.007385</td>\n",
              "      <td>0.002805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>64</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "      <td>0.006688</td>\n",
              "      <td>0.002400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>128</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "      <td>0.006742</td>\n",
              "      <td>0.002387</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>256</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "      <td>0.006850</td>\n",
              "      <td>0.002879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>32</td>\n",
              "      <td>75.791169</td>\n",
              "      <td>75.784219</td>\n",
              "      <td>0.006901</td>\n",
              "      <td>0.003029</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98b73248-8994-44a1-b5e6-724d361f6120')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-98b73248-8994-44a1-b5e6-724d361f6120 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-98b73248-8994-44a1-b5e6-724d361f6120');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = resultados.corr()"
      ],
      "metadata": {
        "id": "4d8zJStCUDru"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Seaborn Correlation\n",
        "\n",
        "from string import ascii_letters\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.set_theme(style=\"white\")\n",
        "\n",
        "# Generate a mask for the upper triangle\n",
        "mask = np.triu(np.ones_like(corr, dtype=bool))\n",
        "\n",
        "# Set up the matplotlib figure\n",
        "f, ax = plt.subplots(figsize=(11, 9))\n",
        "\n",
        "# Generate a custom diverging colormap\n",
        "cmap = sns.diverging_palette(230, 20, as_cmap=True)\n",
        "\n",
        "# Draw the heatmap with the mask and correct aspect ratio\n",
        "sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n",
        "            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 889
        },
        "id": "BoFgoyHlWTSZ",
        "outputId": "15e04a1c-6db8-4338-8ec7-a163530d9237"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 56
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1100x900 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "resultados.sort_values('test', ascending=False).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Lqqu636qWTWB",
        "outputId": "b12a5b76-0126-4475-ac81-c48a633bb432"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    max_depth  min_samples_leaf  min_samples_split      train       test  \\\n",
              "45          3               256                 64  78.750993  78.672633   \n",
              "41          3               128                 64  78.750993  78.672633   \n",
              "48          4                32                 32  78.750993  78.672633   \n",
              "47          3               256                256  78.750993  78.672633   \n",
              "46          3               256                128  78.750993  78.672633   \n",
              "\n",
              "    fit_time  score_time  \n",
              "45  0.011483    0.002366  \n",
              "41  0.011201    0.002385  \n",
              "48  0.013865    0.002747  \n",
              "47  0.010903    0.002348  \n",
              "46  0.011446    0.002409  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2642ab1b-10d9-4721-a92d-1290ddf234c1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>max_depth</th>\n",
              "      <th>min_samples_leaf</th>\n",
              "      <th>min_samples_split</th>\n",
              "      <th>train</th>\n",
              "      <th>test</th>\n",
              "      <th>fit_time</th>\n",
              "      <th>score_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>3</td>\n",
              "      <td>256</td>\n",
              "      <td>64</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "      <td>0.011483</td>\n",
              "      <td>0.002366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>3</td>\n",
              "      <td>128</td>\n",
              "      <td>64</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "      <td>0.011201</td>\n",
              "      <td>0.002385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>4</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "      <td>0.013865</td>\n",
              "      <td>0.002747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>3</td>\n",
              "      <td>256</td>\n",
              "      <td>256</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "      <td>0.010903</td>\n",
              "      <td>0.002348</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>3</td>\n",
              "      <td>256</td>\n",
              "      <td>128</td>\n",
              "      <td>78.750993</td>\n",
              "      <td>78.672633</td>\n",
              "      <td>0.011446</td>\n",
              "      <td>0.002409</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2642ab1b-10d9-4721-a92d-1290ddf234c1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2642ab1b-10d9-4721-a92d-1290ddf234c1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2642ab1b-10d9-4721-a92d-1290ddf234c1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Aula4: Explorando espacio de hiperparametros con GridSearchCV"
      ],
      "metadata": {
        "id": "Ip4_0no5Yw2T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "SEED=301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "espacio_de_parametros = {\n",
        "    'max_depth':[3, 5],\n",
        "    'min_samples_split':[32, 64, 128],\n",
        "    'min_samples_leaf':[32, 64, 128],\n",
        "    'criterion':['gini', 'entropy']\n",
        "}\n",
        "\n",
        "buscar = GridSearchCV(DecisionTreeClassifier(),\n",
        "                      espacio_de_parametros,\n",
        "                      cv = GroupKFold(n_splits = 10))\n",
        "\n",
        "buscar.fit(x_ord, y_ord, groups = datos.modelo)\n",
        "resultados = pd.DataFrame(buscar.cv_results_)\n",
        "resultados.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "nY9YM_9bY3Gd",
        "outputId": "f3cc1de8-3db9-400c-d2a0-d05360799cf8"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
              "0       0.018321      0.002610         0.005200        0.003254   \n",
              "1       0.017843      0.003208         0.004800        0.002222   \n",
              "2       0.023315      0.008904         0.005352        0.003332   \n",
              "3       0.018163      0.003823         0.003909        0.000319   \n",
              "4       0.018633      0.004161         0.003884        0.000596   \n",
              "\n",
              "  param_criterion param_max_depth param_min_samples_leaf  \\\n",
              "0            gini               3                     32   \n",
              "1            gini               3                     32   \n",
              "2            gini               3                     32   \n",
              "3            gini               3                     64   \n",
              "4            gini               3                     64   \n",
              "\n",
              "  param_min_samples_split                                             params  \\\n",
              "0                      32  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "1                      64  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "2                     128  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "3                      32  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "4                      64  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "\n",
              "   split0_test_score  ...  split3_test_score  split4_test_score  \\\n",
              "0           0.804757  ...            0.78408           0.783181   \n",
              "1           0.804757  ...            0.78408           0.783181   \n",
              "2           0.804757  ...            0.78408           0.783181   \n",
              "3           0.804757  ...            0.78408           0.783181   \n",
              "4           0.804757  ...            0.78408           0.783181   \n",
              "\n",
              "   split5_test_score  split6_test_score  split7_test_score  split8_test_score  \\\n",
              "0           0.797809           0.762866           0.781818            0.77551   \n",
              "1           0.797809           0.762866           0.781818            0.77551   \n",
              "2           0.797809           0.762866           0.781818            0.77551   \n",
              "3           0.797809           0.762866           0.781818            0.77551   \n",
              "4           0.797809           0.762866           0.781818            0.77551   \n",
              "\n",
              "   split9_test_score  mean_test_score  std_test_score  rank_test_score  \n",
              "0           0.790262         0.786726        0.011361                1  \n",
              "1           0.790262         0.786726        0.011361                1  \n",
              "2           0.790262         0.786726        0.011361                1  \n",
              "3           0.790262         0.786726        0.011361                1  \n",
              "4           0.790262         0.786726        0.011361                1  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-06fc1f45-a4d5-44c7-94a8-7e8057d50b6a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_fit_time</th>\n",
              "      <th>std_fit_time</th>\n",
              "      <th>mean_score_time</th>\n",
              "      <th>std_score_time</th>\n",
              "      <th>param_criterion</th>\n",
              "      <th>param_max_depth</th>\n",
              "      <th>param_min_samples_leaf</th>\n",
              "      <th>param_min_samples_split</th>\n",
              "      <th>params</th>\n",
              "      <th>split0_test_score</th>\n",
              "      <th>...</th>\n",
              "      <th>split3_test_score</th>\n",
              "      <th>split4_test_score</th>\n",
              "      <th>split5_test_score</th>\n",
              "      <th>split6_test_score</th>\n",
              "      <th>split7_test_score</th>\n",
              "      <th>split8_test_score</th>\n",
              "      <th>split9_test_score</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "      <th>rank_test_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.018321</td>\n",
              "      <td>0.002610</td>\n",
              "      <td>0.005200</td>\n",
              "      <td>0.003254</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.804757</td>\n",
              "      <td>...</td>\n",
              "      <td>0.78408</td>\n",
              "      <td>0.783181</td>\n",
              "      <td>0.797809</td>\n",
              "      <td>0.762866</td>\n",
              "      <td>0.781818</td>\n",
              "      <td>0.77551</td>\n",
              "      <td>0.790262</td>\n",
              "      <td>0.786726</td>\n",
              "      <td>0.011361</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.017843</td>\n",
              "      <td>0.003208</td>\n",
              "      <td>0.004800</td>\n",
              "      <td>0.002222</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>64</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.804757</td>\n",
              "      <td>...</td>\n",
              "      <td>0.78408</td>\n",
              "      <td>0.783181</td>\n",
              "      <td>0.797809</td>\n",
              "      <td>0.762866</td>\n",
              "      <td>0.781818</td>\n",
              "      <td>0.77551</td>\n",
              "      <td>0.790262</td>\n",
              "      <td>0.786726</td>\n",
              "      <td>0.011361</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.023315</td>\n",
              "      <td>0.008904</td>\n",
              "      <td>0.005352</td>\n",
              "      <td>0.003332</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>128</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.804757</td>\n",
              "      <td>...</td>\n",
              "      <td>0.78408</td>\n",
              "      <td>0.783181</td>\n",
              "      <td>0.797809</td>\n",
              "      <td>0.762866</td>\n",
              "      <td>0.781818</td>\n",
              "      <td>0.77551</td>\n",
              "      <td>0.790262</td>\n",
              "      <td>0.786726</td>\n",
              "      <td>0.011361</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.018163</td>\n",
              "      <td>0.003823</td>\n",
              "      <td>0.003909</td>\n",
              "      <td>0.000319</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>64</td>\n",
              "      <td>32</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.804757</td>\n",
              "      <td>...</td>\n",
              "      <td>0.78408</td>\n",
              "      <td>0.783181</td>\n",
              "      <td>0.797809</td>\n",
              "      <td>0.762866</td>\n",
              "      <td>0.781818</td>\n",
              "      <td>0.77551</td>\n",
              "      <td>0.790262</td>\n",
              "      <td>0.786726</td>\n",
              "      <td>0.011361</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.018633</td>\n",
              "      <td>0.004161</td>\n",
              "      <td>0.003884</td>\n",
              "      <td>0.000596</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>64</td>\n",
              "      <td>64</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.804757</td>\n",
              "      <td>...</td>\n",
              "      <td>0.78408</td>\n",
              "      <td>0.783181</td>\n",
              "      <td>0.797809</td>\n",
              "      <td>0.762866</td>\n",
              "      <td>0.781818</td>\n",
              "      <td>0.77551</td>\n",
              "      <td>0.790262</td>\n",
              "      <td>0.786726</td>\n",
              "      <td>0.011361</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06fc1f45-a4d5-44c7-94a8-7e8057d50b6a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-06fc1f45-a4d5-44c7-94a8-7e8057d50b6a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-06fc1f45-a4d5-44c7-94a8-7e8057d50b6a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(buscar.best_params_)\n",
        "print(buscar.best_score_*100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nDizoD2ea4LS",
        "outputId": "c5b18bb0-93a5-4685-ff02-21500143c465"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'criterion': 'gini', 'max_depth': 3, 'min_samples_leaf': 32, 'min_samples_split': 32}\n",
            "78.67263337284332\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mejor = buscar.best_estimator_\n",
        "mejor"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "Zrqwf8mKbiq0",
        "outputId": "9069e6ba-6d22-4521-c676-c64660a0de35"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=3, min_samples_leaf=32, min_samples_split=32)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=3, min_samples_leaf=32, min_samples_split=32)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=3, min_samples_leaf=32, min_samples_split=32)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "prediccion = mejor.predict(x_ord)\n",
        "accuracy = accuracy_score(prediccion, y_ord) * 100\n",
        "print('Accuracy para los datos fue %.2f%%' % accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XBfETGZ9bu0u",
        "outputId": "eaa4a7aa-2db5-436e-8429-f3ab67f307af"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy para los datos fue 78.75%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Aula5: Nested Cross Validation"
      ],
      "metadata": {
        "id": "cZvCaHBKciyD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "escenario real"
      ],
      "metadata": {
        "id": "2lkCldD2eZHd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import KFold\n",
        "\n",
        "SEED=301\n",
        "np.random.seed(SEED)\n",
        "\n",
        "espacio_de_parametros = {\n",
        "    'max_depth':[3, 5],\n",
        "    'min_samples_split':[32, 64, 128],\n",
        "    'min_samples_leaf':[32, 64, 128],\n",
        "    'criterion':['gini', 'entropy']\n",
        "}\n",
        "\n",
        "buscar = GridSearchCV(DecisionTreeClassifier(),\n",
        "                      espacio_de_parametros,\n",
        "                      cv = KFold(n_splits = 5, shuffle= True))\n",
        "\n",
        "buscar.fit(x_ord, y_ord)\n",
        "resultados = pd.DataFrame(buscar.cv_results_)\n",
        "resultados.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "r-r5ED_GeaR_",
        "outputId": "8d749d0b-21cf-4c30-e9ac-f9715f0fb77b"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
              "0       0.012368      0.003099         0.002769        0.000231   \n",
              "1       0.010947      0.000646         0.002688        0.000386   \n",
              "2       0.014019      0.001573         0.003610        0.000460   \n",
              "3       0.014831      0.000439         0.003993        0.000202   \n",
              "4       0.015970      0.001188         0.004064        0.000104   \n",
              "\n",
              "  param_criterion param_max_depth param_min_samples_leaf  \\\n",
              "0            gini               3                     32   \n",
              "1            gini               3                     32   \n",
              "2            gini               3                     32   \n",
              "3            gini               3                     64   \n",
              "4            gini               3                     64   \n",
              "\n",
              "  param_min_samples_split                                             params  \\\n",
              "0                      32  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "1                      64  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "2                     128  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "3                      32  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "4                      64  {'criterion': 'gini', 'max_depth': 3, 'min_sam...   \n",
              "\n",
              "   split0_test_score  split1_test_score  split2_test_score  split3_test_score  \\\n",
              "0              0.784              0.776             0.8025              0.793   \n",
              "1              0.784              0.776             0.8025              0.793   \n",
              "2              0.784              0.776             0.8025              0.793   \n",
              "3              0.784              0.776             0.8025              0.793   \n",
              "4              0.784              0.776             0.8025              0.793   \n",
              "\n",
              "   split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
              "0             0.7795            0.787        0.009618                1  \n",
              "1             0.7795            0.787        0.009618                1  \n",
              "2             0.7795            0.787        0.009618                1  \n",
              "3             0.7795            0.787        0.009618                1  \n",
              "4             0.7795            0.787        0.009618                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a44ea9a-ccd7-446c-a35c-a3ef8fc37871\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_fit_time</th>\n",
              "      <th>std_fit_time</th>\n",
              "      <th>mean_score_time</th>\n",
              "      <th>std_score_time</th>\n",
              "      <th>param_criterion</th>\n",
              "      <th>param_max_depth</th>\n",
              "      <th>param_min_samples_leaf</th>\n",
              "      <th>param_min_samples_split</th>\n",
              "      <th>params</th>\n",
              "      <th>split0_test_score</th>\n",
              "      <th>split1_test_score</th>\n",
              "      <th>split2_test_score</th>\n",
              "      <th>split3_test_score</th>\n",
              "      <th>split4_test_score</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "      <th>rank_test_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.012368</td>\n",
              "      <td>0.003099</td>\n",
              "      <td>0.002769</td>\n",
              "      <td>0.000231</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.784</td>\n",
              "      <td>0.776</td>\n",
              "      <td>0.8025</td>\n",
              "      <td>0.793</td>\n",
              "      <td>0.7795</td>\n",
              "      <td>0.787</td>\n",
              "      <td>0.009618</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.010947</td>\n",
              "      <td>0.000646</td>\n",
              "      <td>0.002688</td>\n",
              "      <td>0.000386</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>64</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.784</td>\n",
              "      <td>0.776</td>\n",
              "      <td>0.8025</td>\n",
              "      <td>0.793</td>\n",
              "      <td>0.7795</td>\n",
              "      <td>0.787</td>\n",
              "      <td>0.009618</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.014019</td>\n",
              "      <td>0.001573</td>\n",
              "      <td>0.003610</td>\n",
              "      <td>0.000460</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>128</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.784</td>\n",
              "      <td>0.776</td>\n",
              "      <td>0.8025</td>\n",
              "      <td>0.793</td>\n",
              "      <td>0.7795</td>\n",
              "      <td>0.787</td>\n",
              "      <td>0.009618</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.014831</td>\n",
              "      <td>0.000439</td>\n",
              "      <td>0.003993</td>\n",
              "      <td>0.000202</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>64</td>\n",
              "      <td>32</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.784</td>\n",
              "      <td>0.776</td>\n",
              "      <td>0.8025</td>\n",
              "      <td>0.793</td>\n",
              "      <td>0.7795</td>\n",
              "      <td>0.787</td>\n",
              "      <td>0.009618</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.015970</td>\n",
              "      <td>0.001188</td>\n",
              "      <td>0.004064</td>\n",
              "      <td>0.000104</td>\n",
              "      <td>gini</td>\n",
              "      <td>3</td>\n",
              "      <td>64</td>\n",
              "      <td>64</td>\n",
              "      <td>{'criterion': 'gini', 'max_depth': 3, 'min_sam...</td>\n",
              "      <td>0.784</td>\n",
              "      <td>0.776</td>\n",
              "      <td>0.8025</td>\n",
              "      <td>0.793</td>\n",
              "      <td>0.7795</td>\n",
              "      <td>0.787</td>\n",
              "      <td>0.009618</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a44ea9a-ccd7-446c-a35c-a3ef8fc37871')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8a44ea9a-ccd7-446c-a35c-a3ef8fc37871 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8a44ea9a-ccd7-446c-a35c-a3ef8fc37871');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "scores = cross_val_score(buscar, x_ord, y_ord, cv=KFold(n_splits=5, shuffle=True))\n",
        "scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tYksT3SRfDK3",
        "outputId": "a033f554-8eae-410e-c778-af7714c6b60a"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.7895, 0.7825, 0.7905, 0.7715, 0.7995])"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def imprime_score(scores):\n",
        "  media= scores.mean()*100\n",
        "  desviacion = scores.std()*100\n",
        "  print('Accuracy media %.2f' % media)\n",
        "  print('Intervalo [%.2f, %.2f]' % (media - 2 * desviacion, media + 2 * desviacion))"
      ],
      "metadata": {
        "id": "heazBE_Wfn1z"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imprime_score(scores)  #esto si es la performance o la precisión real sobre los datos reales"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g4wUj09-gdgK",
        "outputId": "e74a8199-e090-4872-cfd5-33af3e1628c0"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy media 78.67\n",
            "Intervalo [76.80, 80.54]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mejor = buscar.best_estimator_ \n",
        "mejor"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "JXRom1hSgiDO",
        "outputId": "eec92341-c2ba-485c-f5ec-74cc3221efb1"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=3, min_samples_leaf=32, min_samples_split=32)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=3, min_samples_leaf=32, min_samples_split=32)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=3, min_samples_leaf=32, min_samples_split=32)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#no se por que pero no muestra el criterion=gini, deberia mostrarlo"
      ],
      "metadata": {
        "id": "dNgXkJ7JhDqx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features = x_ord.columns\n",
        "dot_data = export_graphviz(mejor, out_file=None, filled=True, rounded=True, class_names=['No','Si'], feature_names= features)\n",
        "graph = graphviz.Source(dot_data)\n",
        "graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "Ak3261l0hYcv",
        "outputId": "76620a7f-bc68-434c-9410-c74848fc0bf6"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"867pt\" height=\"433pt\"\n viewBox=\"0.00 0.00 867.00 433.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 429)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-429 863,-429 863,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#c8e4f8\" stroke=\"black\" d=\"M353,-425C353,-425 236,-425 236,-425 230,-425 224,-419 224,-413 224,-413 224,-354 224,-354 224,-348 230,-342 236,-342 236,-342 353,-342 353,-342 359,-342 365,-348 365,-354 365,-354 365,-413 365,-413 365,-419 359,-425 353,-425\"/>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 59982.246</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.487</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10000</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4200, 5800]</text>\n<text text-anchor=\"middle\" x=\"294.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#52a9e8\" stroke=\"black\" d=\"M264,-306C264,-306 147,-306 147,-306 141,-306 135,-300 135,-294 135,-294 135,-235 135,-235 135,-229 141,-223 147,-223 147,-223 264,-223 264,-223 270,-223 276,-229 276,-235 276,-235 276,-294 276,-294 276,-300 270,-306 264,-306\"/>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 40083.385</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.198</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4347</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [484, 3863]</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M263.62,-341.91C256.79,-332.92 249.48,-323.32 242.43,-314.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"245.16,-311.86 236.32,-306.02 239.59,-316.1 245.16,-311.86\"/>\n<text text-anchor=\"middle\" x=\"232.96\" y=\"-327.09\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#f3c3a0\" stroke=\"black\" d=\"M514,-306C514,-306 359,-306 359,-306 353,-306 347,-300 347,-294 347,-294 347,-235 347,-235 347,-229 353,-223 359,-223 359,-223 514,-223 514,-223 520,-223 526,-229 526,-235 526,-235 526,-294 526,-294 526,-300 520,-306 514,-306\"/>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">km_by_year &lt;= 24124.006</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.45</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5653</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3716, 1937]</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 0&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>0&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M343.77,-341.91C355.22,-332.47 367.51,-322.34 379.28,-312.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"381.83,-315.08 387.32,-306.02 377.38,-309.68 381.83,-315.08\"/>\n<text text-anchor=\"middle\" x=\"384.92\" y=\"-327.21\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#399de5\" stroke=\"black\" d=\"M105,-179.5C105,-179.5 12,-179.5 12,-179.5 6,-179.5 0,-173.5 0,-167.5 0,-167.5 0,-123.5 0,-123.5 0,-117.5 6,-111.5 12,-111.5 12,-111.5 105,-111.5 105,-111.5 111,-111.5 117,-117.5 117,-123.5 117,-123.5 117,-167.5 117,-167.5 117,-173.5 111,-179.5 105,-179.5\"/>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1935</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1935]</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M154.5,-222.91C139.53,-210.99 123.17,-197.98 108.28,-186.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"110.18,-183.16 100.17,-179.67 105.82,-188.63 110.18,-183.16\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#6bb6ec\" stroke=\"black\" d=\"M264,-187C264,-187 147,-187 147,-187 141,-187 135,-181 135,-175 135,-175 135,-116 135,-116 135,-110 141,-104 147,-104 147,-104 264,-104 264,-104 270,-104 276,-110 276,-116 276,-116 276,-175 276,-175 276,-181 270,-187 264,-187\"/>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 41083.029</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.321</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2412</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [484, 1928]</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.5,-222.91C205.5,-214.65 205.5,-205.86 205.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"209,-197.02 205.5,-187.02 202,-197.02 209,-197.02\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#95cbf1\" stroke=\"black\" d=\"M109.5,-68C109.5,-68 23.5,-68 23.5,-68 17.5,-68 11.5,-62 11.5,-56 11.5,-56 11.5,-12 11.5,-12 11.5,-6 17.5,0 23.5,0 23.5,0 109.5,0 109.5,0 115.5,0 121.5,-6 121.5,-12 121.5,-12 121.5,-56 121.5,-56 121.5,-62 115.5,-68 109.5,-68\"/>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.434</text>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 110</text>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [35, 75]</text>\n<text text-anchor=\"middle\" x=\"66.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M153.74,-103.73C141.7,-94.24 128.9,-84.16 116.92,-74.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"118.79,-71.74 108.77,-68.3 114.46,-77.24 118.79,-71.74\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#69b5eb\" stroke=\"black\" d=\"M259.5,-68C259.5,-68 151.5,-68 151.5,-68 145.5,-68 139.5,-62 139.5,-56 139.5,-56 139.5,-12 139.5,-12 139.5,-6 145.5,0 151.5,0 151.5,0 259.5,0 259.5,0 265.5,0 271.5,-6 271.5,-12 271.5,-12 271.5,-56 271.5,-56 271.5,-62 265.5,-68 259.5,-68\"/>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.314</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2302</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [449, 1853]</text>\n<text text-anchor=\"middle\" x=\"205.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.5,-103.73C205.5,-95.52 205.5,-86.86 205.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"209,-78.3 205.5,-68.3 202,-78.3 209,-78.3\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"#fcefe5\" stroke=\"black\" d=\"M494.5,-187C494.5,-187 378.5,-187 378.5,-187 372.5,-187 366.5,-181 366.5,-175 366.5,-175 366.5,-116 366.5,-116 366.5,-110 372.5,-104 378.5,-104 378.5,-104 494.5,-104 494.5,-104 500.5,-104 506.5,-110 506.5,-116 506.5,-116 506.5,-175 506.5,-175 506.5,-181 500.5,-187 494.5,-187\"/>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 99974.41</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.498</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3513</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1879, 1634]</text>\n<text text-anchor=\"middle\" x=\"436.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 6&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>6&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M436.5,-222.91C436.5,-214.65 436.5,-205.86 436.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"440,-197.02 436.5,-187.02 433,-197.02 440,-197.02\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"#e9965a\" stroke=\"black\" d=\"M716,-187C716,-187 591,-187 591,-187 585,-187 579,-181 579,-175 579,-175 579,-116 579,-116 579,-110 585,-104 591,-104 591,-104 716,-104 716,-104 722,-104 728,-110 728,-116 728,-116 728,-175 728,-175 728,-181 722,-187 716,-187\"/>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">precio &lt;= 100076.957</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.243</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2140</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1837, 303]</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 6&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>6&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M511.79,-222.91C530.49,-212.82 550.65,-201.95 569.74,-191.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"571.57,-194.65 578.71,-186.82 568.25,-188.49 571.57,-194.65\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"#f9e0ce\" stroke=\"black\" d=\"M417.5,-68C417.5,-68 301.5,-68 301.5,-68 295.5,-68 289.5,-62 289.5,-56 289.5,-56 289.5,-12 289.5,-12 289.5,-6 295.5,0 301.5,0 301.5,0 417.5,0 417.5,0 423.5,0 429.5,-6 429.5,-12 429.5,-12 429.5,-56 429.5,-56 429.5,-62 423.5,-68 417.5,-68\"/>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.49</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2944</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1682, 1262]</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 7&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>7&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M407.83,-103.73C401.61,-94.88 395.02,-85.51 388.77,-76.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"391.53,-74.47 382.92,-68.3 385.81,-78.49 391.53,-74.47\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"#a2d1f3\" stroke=\"black\" d=\"M561,-68C561,-68 460,-68 460,-68 454,-68 448,-62 448,-56 448,-56 448,-12 448,-12 448,-6 454,0 460,0 460,0 561,0 561,0 567,0 573,-6 573,-12 573,-12 573,-56 573,-56 573,-62 567,-68 561,-68\"/>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.453</text>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 569</text>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [197, 372]</text>\n<text text-anchor=\"middle\" x=\"510.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 7&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>7&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M464.05,-103.73C470.03,-94.88 476.37,-85.51 482.37,-76.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"485.3,-78.54 488,-68.3 479.5,-74.63 485.3,-78.54\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"#e68742\" stroke=\"black\" d=\"M704,-68C704,-68 603,-68 603,-68 597,-68 591,-62 591,-56 591,-56 591,-12 591,-12 591,-6 597,0 603,0 603,0 704,0 704,0 710,0 716,-6 716,-12 716,-12 716,-56 716,-56 716,-62 710,-68 704,-68\"/>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.082</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1809</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1732, 77]</text>\n<text text-anchor=\"middle\" x=\"653.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = No</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M653.5,-103.73C653.5,-95.52 653.5,-86.86 653.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"657,-78.3 653.5,-68.3 650,-78.3 657,-78.3\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"#95cbf1\" stroke=\"black\" d=\"M847,-68C847,-68 746,-68 746,-68 740,-68 734,-62 734,-56 734,-56 734,-12 734,-12 734,-6 740,0 746,0 746,0 847,0 847,0 853,0 859,-6 859,-12 859,-12 859,-56 859,-56 859,-62 853,-68 847,-68\"/>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.433</text>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 331</text>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [105, 226]</text>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Si</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M706.75,-103.73C719.25,-94.15 732.56,-83.96 744.99,-74.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"747.2,-77.16 753.01,-68.3 742.95,-71.6 747.2,-77.16\"/>\n</g>\n</g>\n</svg>\n",
            "text/plain": [
              "<graphviz.sources.Source at 0x7fea57ea4b80>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Nl-RMSwYhYgm"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}